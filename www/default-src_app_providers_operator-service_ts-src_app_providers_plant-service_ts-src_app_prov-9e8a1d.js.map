{"version":3,"sources":["./node_modules/@ionic-native/sqlite/__ivy_ngcc__/ngx/index.js","./node_modules/rxjs-compat/add/operator/toPromise.js","./node_modules/rxjs/add/operator/toPromise.js","./src/app/providers/operator-service.ts","./src/app/providers/plant-service.ts","./src/app/providers/sql-service.ts","./src/app/providers/tank-service.ts","./src/app/providers/timesheet-service.ts","./src/app/providers/transaction-service.ts","./src/environments/config.ts"],"names":["SQLiteObject","_objectInstance","prototype","addTransaction","transaction","cordovaInstance","arguments","fn","readTransaction","startNextTransaction","open","close","executeSql","statement","params","sqlBatch","sqlStatements","abortallPendingTransactions","Object","defineProperty","get","instancePropertyGet","set","value","instancePropertySet","enumerable","configurable","SQLite","_super","__extends","apply","create","config","_this","checkAvailability","Promise","resolve","reject","sqlitePlugin","openDatabase","db","echoTest","cordova","selfTest","deleteDatabase","pluginName","pluginRef","plugin","repo","platforms","ɵfac","ɵSQLite_BaseFactory","SQLite_Factory","t","ɵngcc0","ɵprov","token","factory","ngDevMode","type","Injectable","IonicNativePlugin","require"],"mappings":"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","file":"default-src_app_providers_operator-service_ts-src_app_providers_plant-service_ts-src_app_prov-9e8a1d.js","sourcesContent":["import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova, checkAvailability, cordovaInstance, instancePropertyGet, instancePropertySet } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\nvar SQLiteObject = /** @class */ (function () {\n    function SQLiteObject(_objectInstance) {\n        this._objectInstance = _objectInstance;\n    }\n    SQLiteObject.prototype.addTransaction = function (transaction) { return cordovaInstance(this, \"addTransaction\", { \"sync\": true }, arguments); };\n    SQLiteObject.prototype.transaction = function (fn) { return cordovaInstance(this, \"transaction\", { \"successIndex\": 2, \"errorIndex\": 1 }, arguments); };\n    SQLiteObject.prototype.readTransaction = function (fn) { return cordovaInstance(this, \"readTransaction\", {}, arguments); };\n    SQLiteObject.prototype.startNextTransaction = function () { return cordovaInstance(this, \"startNextTransaction\", { \"sync\": true }, arguments); };\n    SQLiteObject.prototype.open = function () { return cordovaInstance(this, \"open\", {}, arguments); };\n    SQLiteObject.prototype.close = function () { return cordovaInstance(this, \"close\", {}, arguments); };\n    SQLiteObject.prototype.executeSql = function (statement, params) { return cordovaInstance(this, \"executeSql\", {}, arguments); };\n    SQLiteObject.prototype.sqlBatch = function (sqlStatements) { return cordovaInstance(this, \"sqlBatch\", {}, arguments); };\n    SQLiteObject.prototype.abortallPendingTransactions = function () { return cordovaInstance(this, \"abortallPendingTransactions\", { \"sync\": true }, arguments); };\n    Object.defineProperty(SQLiteObject.prototype, \"databaseFeatures\", {\n        get: function () { return instancePropertyGet(this, \"databaseFeatures\"); },\n        set: function (value) { instancePropertySet(this, \"databaseFeatures\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SQLiteObject.prototype, \"openDBs\", {\n        get: function () { return instancePropertyGet(this, \"openDBs\"); },\n        set: function (value) { instancePropertySet(this, \"openDBs\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    return SQLiteObject;\n}());\nexport { SQLiteObject };\nvar SQLite = /** @class */ (function (_super) {\n    __extends(SQLite, _super);\n    function SQLite() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SQLite.prototype.create = function (config) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return new Promise(function (resolve, reject) {\n                    sqlitePlugin.openDatabase(config, function (db) { return resolve(new SQLiteObject(db)); }, reject);\n                });\n            }\n        })();\n    };\n    SQLite.prototype.echoTest = function () { return cordova(this, \"echoTest\", {}, arguments); };\n    SQLite.prototype.selfTest = function () { return cordova(this, \"selfTest\", {}, arguments); };\n    SQLite.prototype.deleteDatabase = function (config) { return cordova(this, \"deleteDatabase\", {}, arguments); };\n    SQLite.pluginName = \"SQLite\";\n    SQLite.pluginRef = \"sqlitePlugin\";\n    SQLite.plugin = \"cordova-sqlite-storage\";\n    SQLite.repo = \"https://github.com/litehelpers/Cordova-sqlite-storage\";\n    SQLite.platforms = [\"Android\", \"iOS\", \"macOS\", \"Windows\"];\nSQLite.ɵfac = /*@__PURE__*/ function () { var ɵSQLite_BaseFactory; return function SQLite_Factory(t) { return (ɵSQLite_BaseFactory || (ɵSQLite_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(SQLite)))(t || SQLite); }; }();\nSQLite.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SQLite, factory: function (t) { return SQLite.ɵfac(t); } });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SQLite, [{\n        type: Injectable\n    }], null, null); })();\n    return SQLite;\n}(IonicNativePlugin));\nexport { SQLite };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","// HACK: does nothing, because `toPromise` now lives on the `Observable` itself.\n// leaving this module here to prevent breakage.\n//# sourceMappingURL=toPromise.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"rxjs-compat/add/operator/toPromise\");\n//# sourceMappingURL=toPromise.js.map","import 'rxjs/add/operator/toPromise';\nimport { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OperatorService {\n\n    private in_progress:boolean = false;\n\n    constructor(private http:HttpClient, private configuration:Config, private storage:SqlService) {\n        console.log('[OperatorService] - constructor() :: ');\n\n    }\n\n    public init() {\n        console.log('[OperatorService] - init() :: Preparing database table');      \n        return this.storage.executeSql('CREATE TABLE IF NOT EXISTS operators (operator_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, pin_no TEXT)');\n    }\n\n    async load() {\n        console.log('[OperatorService] - load() :: Loading operators from the API');\n        \n        if(this.in_progress)\n        {\n            console.log('[OperatorService] - load() :: Loading is already in progress, exit.');\n            return null;\n        }\n\n        this.in_progress = true;\n\n\n        let result:any = await this.http\n            .get(`${this.configuration.API_ENDPOINT}/operators-dep/${this.configuration.DEPARTMENT_ID}`)\n            .toPromise();\n        console.log('[OperatorService] - load() :: Operators loaded from the API');\n\n        console.log('[OperatorService] - load() :: Deleting operators from the cache');\n        await this.deleteAll();\n        console.log('[OperatorService] - load() :: Operators deleted from the cache');\n\n        console.log('[OperatorService] - load() :: Creating operators in the cache.');\n  \n        let promises = result.Operators.map(async (item) => {\n            item.pin_no = item.pin_no ? parseInt(item.pin_no) : \"\";\n            await this.create(item);\n        });\n        console.info('[OperatorService] - load() :: Operators loaded from the API and cached.');\n        this.in_progress = false;\n        return Promise.all(promises)\n    }\n\n    async find(id: Number) {\n        let query = 'SELECT operator_id, first_name, last_name, pin_no FROM operators WHERE operator_id = (?)';\n        return this.storage.executeSql(query, [id]);\n    }\n\n    async findByPinCode(pin_no: string) {\n        console.log(`[OperatorService] - findByPinCode() :: Attempt to find operator with the PIN ${pin_no}`);\n        let query = 'SELECT operator_id, first_name, last_name, pin_no FROM operators WHERE pin_no = (?)';\n        return this.storage.executeSql(query, [pin_no]);\n    }\n\n    async deleteAll() {\n        return Promise.all([\n            this.storage.executeSql('DELETE FROM operators'),\n            this.storage.executeSql('DELETE FROM SQLITE_SEQUENCE WHERE name=\"operators\"')\n        ]);\n    }\n\n    async create(operator) {\n        let query = 'INSERT INTO operators (operator_id, first_name, last_name, pin_no) VALUES (?, ?, ?, ?)';\n        return this.storage.executeSql(query, [operator.operator_id, operator.first_name, operator.last_name, operator.pin_no]);\n    }\n}\n\n","import 'rxjs/add/operator/toPromise';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n\nimport { Events }               from './events-service';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlantService {\n\n\n    private in_progress:boolean = false;\n\n    constructor(private http: HttpClient, private configuration: Config, private storage: SqlService, private events:Events) {\n        console.log('[PlantService] - constructor() :: ');        \n\n    }\n\n    public init() {        \n        console.log('[PlantService] - init() :: Preparing database table');\n        return this.storage.executeSql('CREATE TABLE IF NOT EXISTS plants (id INTEGER PRIMARY KEY, plant_id INTEGER, plant_no INTEGER, tail_no TEXT)');\n    }\n\n    async load() {\n        console.log('[PlantService] - load() :: Loading plants from the API');\n\n        if(this.in_progress)\n        {\n            console.log('[PlantService] - load() :: Loading is already in progress, exit.');\n            return null;\n        }\n\n        this.in_progress = true;\n\n        let result:any = await this.http\n            .get(`${this.configuration.API_ENDPOINT}/plants-dep/${this.configuration.DEPARTMENT_ID}`)\n            .toPromise();\n            \n        console.log('[PlantService] - load() :: Plants loaded from the API.');\n\n        console.log('[PlantService] - load() :: Deleting plants from the cache.');\n        await this.deleteAll();\n        console.log('[PlantService] - load() :: Plants deleted from the cache.');\n\n        console.log('[PlantService] - load() :: Creating plants in the cache.');\n        let promises = result.Plant.map(async (item) => {\n            // console.log('[PlantService] - load() :: Creating plant in the cache.', item);\n            await this.create(item);\n        });\n        console.info('[PlantService] - load() :: Plants loaded from the API and cached.');\n        this.events.publish('plants:loaded');\n        console.info('[PlantService] - load() :: Event \"plants:loaded\" published.');\n\n        this.in_progress = false;\n\n        return Promise.all(promises)\n    }\n\n    async findAll() {\n        let query = 'SELECT plant_id, plant_no, tail_no FROM plants';\n        return this.storage.executeSql(query);\n    }\n\n    async find(id: Number) {\n        let query = 'SELECT plant_id, plant_no, tail_no FROM plants WHERE plant_id = (?)';\n        return this.storage.executeSql(query, [id]);\n    }\n\n    async deleteAll() {\n        console.log('[PlantService] - deleteAll() :: Deleting plants from the cache.');\n        return Promise.all([\n            this.storage.executeSql('DELETE FROM plants'),\n            this.storage.executeSql('DELETE FROM SQLITE_SEQUENCE WHERE name=\"plants\"')\n        ]);\n    }\n\n    async create(plant) {\n        let query = 'INSERT INTO plants (plant_id, plant_no, tail_no) VALUES (?, ?, ?)';\n        return this.storage.executeSql(query, [plant.plant_id, plant.plant_no, plant.tail_no]);\n    }\n}\n\n","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http'\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\nimport { AppVersion } from '@ionic-native/app-version/ngx';\nimport {Config} from '../../environments/config';\n\nconst win: any = window;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SqlService {\n\n\n  private storage: any;\n\n  constructor(private http: HttpClient, private configuration: Config, private appVersion: AppVersion) {\n    console.log('[SqlService] - constructor() :: ');\n    if (win.sqlitePlugin) {\n      console.log('[SqlService] - constructor() :: Creating SQLite service');\n      this.storage = new SQLite();\n\n      Promise.all([\n        this.appVersion.getAppName(),\n        this.appVersion.getVersionCode(),\n        this.appVersion.getVersionNumber(),\n      ]).then(\n          result => {\n            console.log(`[SqlService] - constructor() :: Opening database ${result[0]}.${result[1]}.${result[2]}.db`);\n            this.storage.openDatabase({\n                name:       `${result[0]}.${result[1]}.${result[2]}.db`,\n                location:   'default'\n            });\n          }\n      )\n    }\n    else {\n      console.log('[SqlService] - constructor() :: Creating WebSQL service');\n      this.storage = win.openDatabase(this.configuration.DATABASE_CONFIG.name, '1.0', 'database', 5 * 1024 * 1024);\n    }\n  }\n\n  public executeSql(statement: string, params: any = []): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.storage.transaction((tx: any) => {\n            tx.executeSql(statement, params,\n              (tx: any, res: any) => resolve({tx: tx, res: res}),\n              (tx: any, err: any) => reject({tx: tx, err: err}));\n          },\n          (err: any) => reject({err: err}));\n      } catch (err) {\n        console.warn('[SqlService] - executeSql() :: Error executing statement', statement);  \n        reject({err: err});\n      }\n    });    \n  }\n}\n","import 'rxjs/add/operator/toPromise';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n\nimport { Events }               from './events-service';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TankService {\n\n\n    private in_progress:boolean = false;\n\n    constructor(private http: HttpClient, private configuration: Config, private storage: SqlService, private events:Events) {\n        console.log('[TankService] - constructor() :: ');        \n\n    }\n\n    public init() {        \n        console.log('[TankService] - init() :: Preparing database table');\n        return this.storage.executeSql('CREATE TABLE IF NOT EXISTS tanks (id INTEGER PRIMARY KEY, trailer_id INTEGER, trailer_no INTEGER, trailer_name TEXT)');\n    }\n\n    async load() {\n        console.log('[TankService] - load() :: Loading tanks from the API');\n\n        if(this.in_progress)\n        {\n            console.log('[TankService] - load() :: Loading is already in progress, exit.');\n            return null;\n        }\n\n        this.in_progress = true;\n\n        let result:any = await this.http\n            .get(`${this.configuration.API_ENDPOINT}/tanks-dep/${this.configuration.DEPARTMENT_ID}`)\n            .toPromise();\n            \n        console.log('[TankService] - load() :: Tanks loaded from the API.');\n\n        console.log('[TankService] - load() :: Deleting tanks from the cache.');\n        await this.deleteAll();\n        console.log('[TankService] - load() :: Tanks deleted from the cache.');\n\n        console.log('[TankService] - load() :: Creating tanks in the cache.');\n        let promises = result.Tank.map(async (item) => {\n            await this.create(item);\n        });\n        console.info('[TankService] - load() :: Tanks loaded from the API and cached.');\n        this.events.publish('tanks:loaded');\n        console.info('[TankService] - load() :: Event \"tanks:loaded\" published.');\n\n        this.in_progress = false;\n\n        return Promise.all(promises)\n    }\n\n    async findAll() {\n        let query = 'SELECT trailer_id, trailer_no, trailer_name FROM tanks';\n        return this.storage.executeSql(query);\n    }\n\n    async find(id: Number) {\n        let query = 'SELECT trailer_id, trailer_no, trailer_name FROM tanks WHERE trailer_id = (?)';\n        return this.storage.executeSql(query, [id]);\n    }\n\n    async deleteAll() {\n        console.log('[TankService] - deleteAll() :: Deleting tanks from the cache.');\n        return Promise.all([\n            this.storage.executeSql('DELETE FROM tanks'),\n            this.storage.executeSql('DELETE FROM SQLITE_SEQUENCE WHERE name=\"tanks\"')\n        ]);\n    }\n\n    async create(tank) {\n        let query = 'INSERT INTO tanks (trailer_id, trailer_no, trailer_name) VALUES (?, ?, ?)';\n        return this.storage.executeSql(query, [tank.trailer_id, tank.trailer_no, tank.trailer_name]);\n    }\n}\n\n","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { DatePipe }     from '@angular/common';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimesheetService {\n\n\n\n  constructor(private http:HttpClient, private configuration: Config, private storage: SqlService) {\n    console.log('[TimesheetService] - constructor() :: ');            \n\n  }\n\n  public init() {\n    console.log('[TimesheetService] - init() :: Preparing database table');    \n    return this.storage.executeSql(`CREATE TABLE IF NOT EXISTS timesheets (\n      timesheet_id INTEGER PRIMARY KEY AUTOINCREMENT,\n      operator_id INTEGER, \n      plant_id INTEGER, \n      start_date TEXT,\n      end_date TEXT, \n      start_hours TEXT, \n      end_hours TEXT, \n      synced_at TEXT\n    )`);\n  }\n\n  async create(data) {\n    console.log('[TimesheetService] - create() :: Creating timesheet in the cache:', data);\n    let insert_query = 'INSERT INTO timesheets (operator_id, plant_id, start_date, end_date, start_hours, end_hours) VALUES (?, ?, ?, ?, ?, ?)';\n    let result = await this.storage.executeSql(\n      insert_query,\n      [\n        data.operator_id,\n        data.plant_id,\n        data.start_date,\n        data.end_date,\n        data.start_hours,\n        data.end_hours\n      ]\n    );\n\n    console.log('[TimesheetService] - create() :: Timesheet created in the cache:', result.res.insertId);\n\n    try {\n      console.log('[TimesheetService] - create() :: Creating timesheetService in the API:', result);\n      data.timesheet_id = result.res.insertId;\n      let api_result = await this.http\n        .post(this.configuration.API_ENDPOINT + '/air-trans/', data)\n        .toPromise();\n\n        console.log('[TimesheetService] - create() :: Timesheet created in the API:', api_result);\n\n        console.log('[TimesheetService] - create() :: Updating timesheet in the cache as synced:', api_result);\n        let update_query  = `UPDATE timesheets SET synced_at = (?) WHERE timesheet_id = (?)`;\n        let datePipe      = new DatePipe(this.configuration.LOCALE);\n        result            = await this.storage.executeSql(\n                                update_query, \n                                [\n                                datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), \n                                data.timesheet_id\n                                ]\n        );\n        console.log('[TimesheetService] - create() :: Timesheet updated in the cache as synced:', result);\n        console.info('[TimesheetService] - create() :: Timesheet uploaded and marked as synced');\n\n    }\n    catch (exception) {\n      console.warn('[TimesheetService] - create() :: Failed to create timesheet in the API:', data, exception);\n    }\n    return result;\n  }\n\n  async upload() {\n    console.log('[TimesheetService] - upload() :: Finding non-synced timesheets');\n    let select_query = 'SELECT timesheet_id, operator_id, plant_id, start_date, end_date, start_hours, end_hours, synced_at FROM timesheets WHERE synced_at IS NULL';\n    let timesheets = await this.storage.executeSql(select_query);\n    console.log('[TimesheetService] - upload() :: Found non-synced timesheets:', timesheets.res.rows.length);    \n    let promises = Array.from(timesheets.res.rows).map(async (timesheet: any) => {\n      console.log('[TimesheetService] - upload() :: Updating non-synced timesheet', timesheet);\n\n      await this.http\n        .post(this.configuration.API_ENDPOINT + '/air-trans/', timesheet)\n        .toPromise();\n\n      let update_query = 'UPDATE timesheets SET synced_at = (?) WHERE timesheet_id = (?)';\n      let datePipe = new DatePipe(this.configuration.LOCALE);\n      return await this.storage.executeSql(update_query, [datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), timesheet.timesheet_id])\n    });\n    return Promise.all(promises)\n  }\n}","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { DatePipe }     from '@angular/common';\nimport {Config} from '../../environments/config';\nimport { SqlService }   from './sql-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionService {\n\n\n\n    constructor(private http: HttpClient, private configuration: Config, private storage: SqlService) {\n        console.log('[TransactionService] - constructor() :: ');\n\n\n    }\n\n    public init() {\n        console.log('[TransactionService] - init() :: Preparing database table');\n        return  this.storage.executeSql(`CREATE TABLE IF NOT EXISTS transactions (\n            transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            pad_id TEXT,\n            operator_id INTEGER,\n            plant_id INTEGER,\n            trailer_id INTEGER,\n            odometer INTEGER,\n            battery_percentage INTEGER,\n            long TEXT,\n            lat TEXT,\n            end_value TEXT,\n            end_total_value TEXT,\n            transaction_end_date TEXT,\n            synced_at TEXT\n        )`);\n    }\n    \n    public initRefills() {\n        console.log('[TransactionService] - init() :: Preparing database table 2');\n        return  this.storage.executeSql(`CREATE TABLE IF NOT EXISTS refills (\n            transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            operator_id INTEGER,\n            from_trailer_id INTEGER,\n            to_trailer_id INTEGER,\n            amount TEXT,\n            synced_at TEXT\n        )`);\n    }    \n\n    async create(transaction) {\n\n        console.log('[TransactionService] - create() :: Creating transaction in the cache:', transaction);\n        let datePipe = new DatePipe(this.configuration.LOCALE);\n        // transaction.transaction_end_date is a timestamp, but in local time ...\n        let transaction_end_date            = transaction.transaction_end_date;\n        transaction_end_date                = transaction_end_date + (new Date()).getTimezoneOffset() * 60;\n        transaction.transaction_end_date    = datePipe.transform(new Date(transaction_end_date * 1000), 'y-MM-dd HH:mm:ss')\n        let insert_query = `INSERT INTO transactions (\n            pad_id, \n            operator_id, \n            plant_id, \n            trailer_id, \n            odometer, \n            battery_percentage, \n            long, \n            lat, \n            end_value, \n            end_total_value, \n            transaction_end_date\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;\n\n        let result = await this.storage.executeSql(\n            insert_query,\n            [\n                transaction.pad_id,\n                transaction.operator_id,\n                transaction.plant_id,\n                transaction.trailer_id,\n                transaction.odometer,\n                transaction.battery_percentage,\n                transaction.long,\n                transaction.lat,\n                transaction.end_value,\n                transaction.end_total_value,\n                transaction.transaction_end_date\n            ]\n        );\n\n        console.log('[TransactionService] - create() :: Transaction created in the cache:', transaction);\n\n        try {\n            console.log('[TransactionService] - create() :: Uploading transaction in the API:', result);\n            transaction.transaction_id = result.res.insertId;\n            let api_result = await this.http\n                .post(this.configuration.API_ENDPOINT + '/transaction/', transaction)\n                .toPromise();\n\n            console.log('[TransactionService] - create() :: Transaction uploaded to the API:', api_result);\n\n            console.log('[TransactionService] - create() :: Marking transaction in the cache as synced:', api_result);\n            let update_query = 'UPDATE transactions SET synced_at = (?) WHERE transaction_id = (?)';\n            result = await this.storage.executeSql(update_query, [datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), transaction.transaction_id])\n            console.log('[TransactionService] - create() :: Transaction marked in the cache as synced:', result);\n            console.info('[TransactionService] - create() :: Transaction uploaded and marked as synced');\n\n        }\n        catch (exception) {\n            console.warn('[TransactionService] - create() :: Failed to create transaction in the API:', transaction, exception);\n        }\n        return result;\n    }\n    \n    \n    async createRefill(transaction) {\n\t\t\n\n\t\tlet api_result = await this.http\n\t\t.post(this.configuration.API_ENDPOINT + '/tank-refill/', transaction)\n\t\t.toPromise();\n\t\t\n\t\t\n\t\treturn api_result;\n\t\t\n/* \t\talert(\"Saving locally\");\n\t\t\n\t\t\n        console.log('[TransactionService] - create() :: Creating Refill in the cache:', transaction);\n        let insert_query = `INSERT INTO refills (operator_id, from_trailer_id, to_trailer_id, amount) VALUES (?, ?, ?, ?)`;\n\t\t\n\t\t\n\t\t\n        let result = await this.storage.executeSql(\n          insert_query,\n          [\n            transaction.operator_id,\n            transaction.from_trailer_id,\n            transaction.to_trailer_id,\n            transaction.amount,\n          ]\n        );\n\t\t\nalert(JSON.stringify(result));\n\t\t\nalert(\"Transaction created in the cache\");\n\n\nalert(result.res.insertId);\n\n        console.log('[TransactionService] - create() :: Transaction created in the cache:', result.res.insertId);\n\n        try {\n          console.log('[TransactionService] - create() :: Creating TransactionService in the API:', result);\n\t\t  alert(\"Creating in API\");\n          transaction.transaction_id = result.res.insertId;\n          let api_result = await this.http\n            .post(this.configuration.API_ENDPOINT + '/tank-refill/', transaction)\n            .toPromise();\n\n            console.log('[TransactionService] - create() :: Transaction created in the API:', api_result);\nalert(\"Transaction created in the API\");\n            console.log('[TransactionService] - create() :: Updating Transaction in the cache as synced:', api_result);\n            let update_query  = `UPDATE refills SET synced_at = (?) WHERE transaction_id = (?)`;\n            let datePipe      = new DatePipe(this.configuration.LOCALE);\n            result            = await this.storage.executeSql(\n                                    update_query, \n                                    [\n                                    datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), \n                                    transaction.dipreading_id\n                                    ]\n            );\n\t\t\talert(\"Transaction updated in the cache as synced\");\n\t\t\t\n            console.log('[TransactionService] - create() :: Transaction updated in the cache as synced:', result);\n            console.info('[TransactionService] - create() :: Transaction uploaded and marked as synced');\n\t\t\t\n\n        }\n        catch (exception) {\n\t\t\talert(\"failed in API\");\n\t\t\talert(JSON.stringify(exception));\n\t\t\talert(JSON.stringify(transaction));\n\t\t\t\n          console.warn('[TransactionService] - create() :: Failed to create Transaction in the API:', transaction, exception);\n        }\n        return result; */\n    }    \n    \n    \n\n    async upload() {\n        console.log('[TransactionService] - upload() :: Finding non-synced transactions');\n        let select_query = `SELECT \n                          transaction_id, \n                          pad_id, \n                          operator_id, \n                          plant_id, \n                          trailer_id, \n                          odometer, \n                          battery_percentage, \n                          long, \n                          lat, \n                          end_value, \n                          end_total_value, \n                          transaction_end_date, \n                          synced_at \n                          FROM transactions WHERE synced_at IS NULL`;\n\n        let transactions = await this.storage.executeSql(select_query).then(\n            async data => {\n                console.log('[TransactionService] - upload() :: Found non-synced transaction:', data.res.rows.length);\n                \n                let promises = [];\n                \n                for(let i = 0; i < data.res.rows.length; i++) {\n\n                    let transaction = data.res.rows.item(i);\n\n                    \n                    await this.http\n                        .post(this.configuration.API_ENDPOINT + '/transaction/', transaction)\n                        .toPromise();\n\n                    let update_query = 'UPDATE transactions SET synced_at = (?) WHERE transaction_id = (?)';\n                    let datePipe = new DatePipe(this.configuration.LOCALE);\n\n                    let promise = await this.storage.executeSql(\n                        update_query,\n                        [\n                            datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'),\n                            transaction.transaction_id\n                        ]\n                    );\n                    \n                    promises.push(promise);                    \n                    \n                    \n                }\n                \n                return promises;\n            }\n        );\n        \n        \n        \n        let transactions2 = await this.storage.executeSql(\"SELECT * FROM refills WHERE synced_at IS NULL\").then(\n            async data => {\n                console.log('[TransactionService] - upload() :: Found non-synced refill transaction:', data.res.rows.length);\n                \n                let promises = [];\n                \n                for(let i = 0; i < data.res.rows.length; i++) {\n\n                    let transaction = data.res.rows.item(i);\n\n                    \n                    await this.http\n                        .post(this.configuration.API_ENDPOINT + '/tank-refills/', transaction)\n                        .toPromise();\n\n                    let update_query = 'UPDATE refills SET synced_at = (?) WHERE transaction_id = (?)';\n                    let datePipe = new DatePipe(this.configuration.LOCALE);\n\n                    let promise = await this.storage.executeSql(\n                        update_query,\n                        [\n                            datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'),\n                            transaction.transaction_id\n                        ]\n                    );\n                    \n                    promises.push(promise);                    \n                    \n                    \n                }\n                \n                return promises;\n            }\n        );        \n        \n        \n        \n\n        return Promise.all(transactions);\n    }\n    \n    \n    async uploadRefills() {\n        console.log('[TransactionService] - upload() :: Finding non-synced transactions');\n        let select_query = `SELECT * FROM refills WHERE synced_at IS NULL`;\n\n        \n        \n        \n        let transactions = await this.storage.executeSql(select_query).then(\n            async data => {\n                console.log('[TransactionService] - upload() :: Found non-synced refill transaction:', data.res.rows.length);\n                \n                let promises = [];\n                \n                for(let i = 0; i < data.res.rows.length; i++) {\n\n                    let transaction = data.res.rows.item(i);\n\n                    \n                    await this.http\n                        .post(this.configuration.API_ENDPOINT + '/tank-refills/', transaction)\n                        .toPromise();\n\n                    let update_query = 'UPDATE refills SET synced_at = (?) WHERE transaction_id = (?)';\n                    let datePipe = new DatePipe(this.configuration.LOCALE);\n\n                    let promise = await this.storage.executeSql(\n                        update_query,\n                        [\n                            datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'),\n                            transaction.transaction_id\n                        ]\n                    );\n                    \n                    promises.push(promise);                    \n                    \n                    \n                }\n                \n                return promises;\n            }\n        );        \n        \n        \n        \n\n        return Promise.all(transactions);\n    }    \n    \n    \n\n}\n\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Config {\n  // public API_ENDPOINT = '/api';\n  public API_ENDPOINT = 'https://www.fuel-it.co/AWS15/fitAPI/api';\n  public DATABASE_CONFIG = {\n    name:       'fuelit.db',\n    location:   'default'\n  };\n  public LOCALE = 'en';\n  public DEPARTMENT_ID = 478;\n}"],"sourceRoot":"webpack:///"}