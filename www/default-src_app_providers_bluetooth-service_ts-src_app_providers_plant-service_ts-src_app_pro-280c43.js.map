{"version":3,"sources":["./src/app/models/bluetooth-message.ts","./src/app/providers/bluetooth-service.ts","./src/app/providers/plant-service.ts","./src/app/providers/tank-service.ts","./src/app/providers/timesheet-service.ts","./src/app/providers/transaction-service.ts"],"names":[],"mappings":"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","file":"default-src_app_providers_bluetooth-service_ts-src_app_providers_plant-service_ts-src_app_pro-280c43.js","sourcesContent":["export class BluetoothMessage {\n    public static readonly ESCAPE           = String.fromCharCode(0x0A);\n    public static readonly FRAME_BOUNDARY   = String.fromCharCode(0x1C);\n}\n\nexport class BluetoothUUID {\n    public static readonly SERVICE           = \"569A1101-B87F-490C-92CB-11BA5EA5167C\";\n    public static readonly READ           = \"569A2000-B87F-490C-92CB-11BA5EA5167C\";\n    public static readonly WRITE           = \"569A2001-B87F-490C-92CB-11BA5EA5167C\";\n}\n\nexport class BluetoothTransactionRequest {\n\n    public toString():string\n    {\n        return `${BluetoothMessage.FRAME_BOUNDARY}{\"type\":\"transactionRequest\"}${BluetoothMessage.FRAME_BOUNDARY}`;\n    }\n    \n    public toArrayBuffer():any\n    {\n        let sendString = this.toString();\n        var array = new Uint8Array(sendString.length);\n        for (var i = 0, l = sendString.length; i < l; i++) {\n            array[i] = sendString.charCodeAt(i);\n         }\n        return array.buffer;       \n    }\n    \n    public toChunkedArrayBuffer():any\n    {\n        let sendString = this.toString();\n        let chunks = sendString.match(/.{1,10}/g);\n        let chunkedBuffer = []\n        \n        for (let chunk of chunks){\n            var array = new Uint8Array(chunk.length);\n            for (var i = 0, l = chunk.length; i < l; i++) {\n                array[i] = chunk.charCodeAt(i);\n             }\n            chunkedBuffer.push(array.buffer);             \n        }\n        \n        return chunkedBuffer       \n    } \n}\n\nexport class BluetoothAcknowledgement {\n\n    public toString():string\n    {\n        return `${BluetoothMessage.FRAME_BOUNDARY}{\"type\":\"OK\"}${BluetoothMessage.FRAME_BOUNDARY}`;\n    }\n    \n    public toArrayBuffer():any\n    {\n        let sendString = this.toString();\n        var array = new Uint8Array(sendString.length);\n        for (var i = 0, l = sendString.length; i < l; i++) {\n            array[i] = sendString.charCodeAt(i);\n         }\n         return array.buffer;        \n    }    \n\n    public toChunkedArrayBuffer():any\n    {\n        let sendString = this.toString();\n        let chunks = sendString.match(/.{1,10}/g);\n        let chunkedBuffer = []\n        \n        for (let chunk of chunks){\n            var array = new Uint8Array(chunk.length);\n            for (var i = 0, l = chunk.length; i < l; i++) {\n                array[i] = chunk.charCodeAt(i);\n             }\n            chunkedBuffer.push(array.buffer);             \n        }\n        \n        return chunkedBuffer       \n    }    \n    \n        \n}\n\nexport class BluetoothResponse {\n\n    private data:any    = null;\n    private type:string = null;\n\n    constructor(rawBuffer:any, isString:boolean) {\n        \n        //convert raw from array buffer to string as per BLE central plugin https://github.com/don/cordova-plugin-ble-central#typed-arrays\n        let raw:string = \"\";\n        if (!isString){\n            raw = this.bytesToString(rawBuffer);\n        }\n        else{\n            raw = rawBuffer;\n        }\n        \n        console.debug(`[BluetoothResponse] - constructor() :: \"${raw}\"`);\n        \n        if(raw != `${BluetoothMessage.FRAME_BOUNDARY}` && raw != `${BluetoothMessage.ESCAPE + BluetoothMessage.FRAME_BOUNDARY}` && raw != '' ) {\n            try {\n                \n                raw = raw.replace(/\\x1C/g,'').replace(/\\x0A/g,'');\n                \n                let packet      = JSON.parse(String(raw.slice(0, raw.length)));\n                this.data       = packet.data;\n                this.type       = packet.type;\n            }\n            catch(error) {\n                console.error('[BluetoothResponse] - constructor() ::', error);               \n                throw error;\n            }\n        }\n    }\n    \n    private bytesToString(buffer) {\n        return String.fromCharCode.apply(null, new Uint8Array(buffer));\n    }\n\n    public getData():any {\n        return this.data;\n    }\n\n    public isBoundaryOnly()\n    {\n        return this.data == null\n    }\n\n    public isEmpty():Boolean\n    {\n        return Object.keys(this.data).length == 0;\n    }\n}","import { Injectable } from '@angular/core';\nimport { AlertController} from '@ionic/angular';\nimport { ToastController }      from '@ionic/angular';\nimport { Events }               from './events-service';\n\nimport 'rxjs/add/operator/map';\n\nimport { BluetoothMessage } from '../models/bluetooth-message';\nimport { BluetoothTransactionRequest } from '../models/bluetooth-message';\nimport { BluetoothAcknowledgement } from '../models/bluetooth-message';\nimport { BluetoothResponse } from '../models/bluetooth-message';\nimport { BluetoothUUID } from '../models/bluetooth-message';\n\nimport { Storage } from '@ionic/storage-angular';\n\ndeclare var ble:any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BluetoothService {\n\n    protected responses:Array<BluetoothResponse> = [];\n    protected deviceCount:number;\n    protected connected: boolean;\n    protected deviceCheckInterval:any;\n    protected previouslyConnectedMeter: string;\n    \n    protected devices:Array<any>;\n    \n    protected chunkedResponse:string;\n    \n    \n    constructor(private events: Events, private toastController:ToastController, private alertCtrl:AlertController, private storage:Storage) {\n\n        this.storage.create();\n        this.deviceCount = 0;\n        this.connected = false;\n        \n        //this.deviceCheckInterval = setInterval(() => {\n            //this.checkDevices();\n        //},10000);        \n        \n        this.previouslyConnectedMeter = \"\";\n        this.storage.get(\"previouslyConnectedMeter\").then((uuid) => {\n            if (uuid){\n                this.previouslyConnectedMeter = uuid;\n            }\n        }).catch(() => {\n            \n        });\n        \n        \n        this.devices = [];\n        \n        this.chunkedResponse = \"\";\n    }\n  \n\n    \n    private checkDevices(){\n        this.scanDevices().then((devices:Array<any>) => {\n\n            let count = devices.length;\n            if (count !== this.deviceCount){\n                this.deviceCount = count;\n                //prompt user if they want to connect to differant device\n                this.changeDevice(devices);\n            }                \n        });               \n    }\n    \n\n    public connect(device:any) {\n        //console.log('[BluetoothService] - connect() :: ');\n \n            this.events.publish('meter:connecting');\n            \n            ble.isConnected(device.address, () => {\n                this.onConnect(device, {status:\"device was already connected\"});\n            }, () => {\n                ble.connect(device.address,\n                (deviceDetails) => this.onConnect(device, deviceDetails),\n                (failure) => this.onFail(failure));    \n            });          \n            \n\n\n    }\n\n    public list() {\n        //console.log(`[BluetoothService] - list() :: List bound devices`);\n        this.responses = new Array();\n        this.events.publish('meter:listing');\n        \n        \n        this.scanDevices().then((devices:Array<any>) => {\n\n            if (devices.length === 1){\n                this.connect(devices[0]);\n                this.storage.set(\"previouslyConnectedMeter\", devices[0].address);\n                return;\n            }\n            else{\n                if (this.previouslyConnectedMeter){\n                    for (let device of devices){\n                        if (device.address === this.previouslyConnectedMeter){\n                            this.connect(device);\n                            return;\n                        }\n                    }\n                }\n                else{\n                    this.selectDevice(devices);\n                }\n            }                \n        });\n\n        \n        \n    }\n    \n    private scanDevices(){\n        \n        return new Promise((resolve, reject) => {\n            \n            let devices:Array<any> = [];\n            let addedDevices:Array<string> = [];\n            ble.scan([BluetoothUUID.SERVICE],5,(foundDevice) => \n                {\n\n                    let newDevice = {address: foundDevice.id, name: foundDevice.name};\n                    \n                    if (newDevice.name && addedDevices.indexOf(newDevice.name) < 0){\n                        //alert(JSON.stringify(foundDevice))\n                        devices.push(newDevice);\n                        addedDevices.push(newDevice.name);\n                    }\n                }\n            ,(failure) => this.onFail(failure));   \n            \n            setTimeout(() => {\n                resolve(devices);\n            },5500);\n            \n            \n        });        \n        \n        \n       \n    }\n    \n    private selectDevice(devices){\n        this.events.publish('meter:listingselect');\n        \n        this.deviceCount = devices.length;\n        \n        \n        let inputs:Array<any> = [];\n        let inputsIndexed = {};\n        for (var index in devices){\n            let device = devices[index]\n            inputs.push({\n                type:\"radio\",\n                name:\"device\" + index,\n                value:index,\n                label:device.name\n            });\n            inputsIndexed[index] = device;\n        }\n        \n\n        \n        this.alertCtrl.create({\n            header: 'Select Device',\n            inputs: inputs,\n            buttons: [\n            {\n                text: 'Cancel',\n                role: 'cancel',\n                handler: data => {\n                  console.log('Cancel clicked');\n                }\n            },\n            {\n                text: 'Connect',\n                handler: deviceIndex => {\n                  if (deviceIndex){\n                      this.events.publish('meter:listingselected');\n                      let device = inputsIndexed[deviceIndex];\n                      this.storage.set(\"previouslyConnectedMeter\", device.address);\n                      this.connect(device);\n                  }\n                }\n            }\n          ]\n        }).then((el) => {\n            el.present();\n        });       \n    }\n    \n    \n    private changeDevice(devices){\n        \n        let inputs:Array<any> = [];\n        let inputsIndexed = {};\n        for (var index in devices){\n            let device = devices[index]\n            inputs.push({\n                type:\"radio\",\n                name:\"device\" + index,\n                value:index,\n                label:device.name\n            });\n            inputsIndexed[index] = device;\n        }\n        \n        this.alertCtrl.create({\n            header: 'Select Device',\n            subHeader: 'The devices in your bluetooth network have changed',\n            message: 'If you wish to change to another meter, select it from the list, otherwise press cancel to continue on the current meter.',\n            inputs: inputs,\n            buttons: [\n            {\n                text: 'Cancel',\n                role: 'cancel',\n                handler: data => {\n                  console.log('Cancel clicked');\n                }\n            },\n            {\n                text: 'Connect',\n                handler: deviceIndex => {\n                  if (deviceIndex){\n                      \n                      let device = inputsIndexed[deviceIndex];\n                        this.events.publish('meter:connecting');\n                        this.storage.set(\"previouslyConnectedMeter\", device.address);\n                        this.connect(device);\n                        \n                        \n                  }\n                }\n            }\n          ]\n        }).then((el) => {\n            el.present();\n        });      \n    }    \n\n    public request(device) {\n        //console.log('[BluetoothService] - request() :: Sending transaction request to the BT device');\n\n        this.events.publish('meter:reading');     \n        let chunkedBuffer = (new BluetoothTransactionRequest()).toChunkedArrayBuffer();\n        \n        for (let chunk of chunkedBuffer){\n            ble.write(device.address, BluetoothUUID.SERVICE, BluetoothUUID.WRITE, chunk,\n                () => this.onRequestComplete(),\n                (failure) => this.onFail(failure));            \n        }           \n        \n\n\n    }\n\n    public requestAll() {\n        //console.log('[BluetoothService] - requestAll() :: Sending transaction request to the BT device');\n    }\n\n    public acknowledge(device) {\n        //console.log('[BluetoothService] - acknowledge() :: Sending acknowledge to the BT device');\n\n        let chunkedBuffer = (new BluetoothAcknowledgement()).toChunkedArrayBuffer();    \n        for (let chunk of chunkedBuffer){\n            ble.write(device.address, BluetoothUUID.SERVICE, BluetoothUUID.WRITE, chunk,\n                () => this.onAcknowledge(device),\n                (failure) => this.onFail(failure));            \n        }                 \n\n    }\n\n    protected onConnect(device:any, deviceDetails:any) {\n        //console.info(`[BluetoothService] - onConnect() :: Connected to BT device ${device.address}.`);\n        this.alertCtrl.create({\n          header: 'Success',\n          subHeader: 'You are now connected to ' + device.name,\n          buttons: ['Dismiss']\n        }).then((el) => {\n            el.present();\n        });  \n        \n        /*\n         * for debugging purposes\n        let alertBox2 = this.alertCtrl.create({\n          title: 'Device Details',\n          subTitle: JSON.stringify(deviceDetails),\n          buttons: ['Dismiss']\n        });\n        alertBox2.present();     \n        \n        */       \n\n        ble.startNotification(device.address, BluetoothUUID.SERVICE, BluetoothUUID.READ,\n            (data) => this.onData(data, device), \n            (failure) => this.onFail(failure));\n            \n        this.request(device);\n        \n        /*\n        setTimeout(() => {\n            let alertBox = this.alertCtrl.create({\n              title: 'Request Again',\n              subTitle: 'Make the request again',\n              buttons: [      {\n                text: 'Cancel',\n                role: 'cancel',\n                handler: () => {\n                  this.events.publish('meter:complete');\n                  ble.disconnect(device.address); \n                }\n              },\n              {\n                text: 'Request',\n                handler: () => {\n                    this.request(device);\n                }\n              }]\n            });\n            alertBox.present();              \n        },10000);   \n        \n        */      \n        \n        \n        \n    }\n\n    protected onData(data, device) {\n        \n        /*\n        let alertBox = this.alertCtrl.create({\n          title: 'Response Received',\n          subTitle: String.fromCharCode.apply(null, new Uint8Array(data)),\n          buttons: ['Dismiss']\n        });\n        alertBox.present();  \n        \n        */       \n        \n        \n        let response;\n        try {\n            response = new BluetoothResponse(data,false);\n        } catch (error) {\n            \n            this.chunkedResponse = this.chunkedResponse + String.fromCharCode.apply(null, new Uint8Array(data));\n            \n            /*\n            let alertBox2 = this.alertCtrl.create({\n              title: 'Current Position',\n              subTitle: this.chunkedResponse,\n              buttons: ['Dismiss']\n            });\n            alertBox2.present();  \n            \n            */          \n            \n            try{\n                \n                response = new BluetoothResponse(this.chunkedResponse,true);\n         \n            } catch(error){\n            \n\n                /*\n                let alertBox3 = this.alertCtrl.create({\n                  title: 'Error converting response',\n                  subTitle: error,\n                  buttons: ['Dismiss']\n                });\n                alertBox3.present();\n                \n                */      \n\n            \n            \n                return;\n                \n            }\n            \n              /*  \n            let alertBox = this.alertCtrl.create({\n              title: 'Full Response Captured',\n              subTitle: this.chunkedResponse,\n              buttons: ['Dismiss']\n            });\n            alertBox.present();               \n            */\n            this.chunkedResponse = \"\";\n        \n            //this.onFail(error);\n\n        }\n\n        // If the response is just a boundary, drop the response.\n        if(response.isBoundaryOnly()) {\n            return;\n        }\n\n        // If the response is not empty, store it until we get an empty response\n        if (!response.isEmpty()) {\n            //console.log('[BluetoothService] - onData() :: Received data from the BT device', response);\n            this.responses.push(response);\n              \n            \n            this.acknowledge(device);\n        }\n        // If the response is empty, we reached the end of the stack, send the last data \n        else {\n            //console.log('[BluetoothService] - onData() :: Finished receiving data from the BT device.');\n            if(this.responses && this.responses.length > 0) {\n                //console.log('[BluetoothService] - onData() :: Publishing the received data.', this.responses);\n                //console.info('[BluetoothService] - onData() :: Publishing the received data.');\n                this.events.publish('meter:data', this.responses);\n            }\n\n            this.events.publish('meter:complete');\n            ble.disconnect(device.address); \n        }\n    }\n\n    protected onRequestComplete() {\n        \n        /*\n        let alertBox = this.alertCtrl.create({\n          title: 'Data Requested',\n          subTitle: 'Data successfully requested from meter',\n          buttons: ['Dismiss']\n        });\n        alertBox.present();     \n        \n        */\n        \n   \n        \n        //console.log('[BluetoothService] - onRequestComplete() :: Transaction request sent to BT device');\n    }\n\n    protected onAcknowledge(device) {\n        //console.log('[BluetoothService] - onAcknowledge() :: Acknowledge sent to BT device');      \n        \n        this.request(device);\n    }\n\n    protected onFail(failure) {\n        \n        let message = \"\";\n        \n        try {\n            message = JSON.stringify(failure);\n        }\n        catch(e){\n            message = failure;\n        }\n        \n        \n        console.warn('[BluetoothService] - onFail() :: ', failure);\n        this.events.publish('meter:complete');\n\n        let toast = this.toastController.create({\n            message: failure,\n            duration: 5000,\n            cssClass: 'toast-error'\n        }).then((el) => {\n            el.present();\n        });\n        this.events.publish('database:synced');\n        \n        this.storage.get(\"previouslyConnectedMeter\").then((uuid) => {\n            if (uuid){\n                ble.disconnect(uuid);\n            }\n        });               \n        \n    }\n}\n","import 'rxjs/add/operator/toPromise';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n\nimport { Events }               from './events-service';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlantService {\n\n\n    private in_progress:boolean = false;\n\n    constructor(private http: HttpClient, private configuration: Config, private storage: SqlService, private events:Events) {\n        console.log('[PlantService] - constructor() :: ');        \n\n    }\n\n    public init() {        \n        console.log('[PlantService] - init() :: Preparing database table');\n        return this.storage.executeSql('CREATE TABLE IF NOT EXISTS plants (id INTEGER PRIMARY KEY, plant_id INTEGER, plant_no INTEGER, tail_no TEXT)');\n    }\n\n    async load() {\n        console.log('[PlantService] - load() :: Loading plants from the API');\n\n        if(this.in_progress)\n        {\n            console.log('[PlantService] - load() :: Loading is already in progress, exit.');\n            return null;\n        }\n\n        this.in_progress = true;\n\n        let result:any = await this.http\n            .get(`${this.configuration.API_ENDPOINT}/plants-dep/${this.configuration.DEPARTMENT_ID}`)\n            .toPromise();\n            \n        console.log('[PlantService] - load() :: Plants loaded from the API.');\n\n        console.log('[PlantService] - load() :: Deleting plants from the cache.');\n        await this.deleteAll();\n        console.log('[PlantService] - load() :: Plants deleted from the cache.');\n\n        console.log('[PlantService] - load() :: Creating plants in the cache.');\n        let promises = result.Plant.map(async (item) => {\n            // console.log('[PlantService] - load() :: Creating plant in the cache.', item);\n            await this.create(item);\n        });\n        console.info('[PlantService] - load() :: Plants loaded from the API and cached.');\n        this.events.publish('plants:loaded');\n        console.info('[PlantService] - load() :: Event \"plants:loaded\" published.');\n\n        this.in_progress = false;\n\n        return Promise.all(promises)\n    }\n\n    async findAll() {\n        let query = 'SELECT plant_id, plant_no, tail_no FROM plants';\n        return this.storage.executeSql(query);\n    }\n\n    async find(id: Number) {\n        let query = 'SELECT plant_id, plant_no, tail_no FROM plants WHERE plant_id = (?)';\n        return this.storage.executeSql(query, [id]);\n    }\n\n    async deleteAll() {\n        console.log('[PlantService] - deleteAll() :: Deleting plants from the cache.');\n        return Promise.all([\n            this.storage.executeSql('DELETE FROM plants'),\n            this.storage.executeSql('DELETE FROM SQLITE_SEQUENCE WHERE name=\"plants\"')\n        ]);\n    }\n\n    async create(plant) {\n        let query = 'INSERT INTO plants (plant_id, plant_no, tail_no) VALUES (?, ?, ?)';\n        return this.storage.executeSql(query, [plant.plant_id, plant.plant_no, plant.tail_no]);\n    }\n}\n\n","import 'rxjs/add/operator/toPromise';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n\nimport { Events }               from './events-service';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TankService {\n\n\n    private in_progress:boolean = false;\n\n    constructor(private http: HttpClient, private configuration: Config, private storage: SqlService, private events:Events) {\n        console.log('[TankService] - constructor() :: ');        \n\n    }\n\n    public init() {        \n        console.log('[TankService] - init() :: Preparing database table');\n        return this.storage.executeSql('CREATE TABLE IF NOT EXISTS tanks (id INTEGER PRIMARY KEY, trailer_id INTEGER, trailer_no INTEGER, trailer_name TEXT)');\n    }\n\n    async load() {\n        console.log('[TankService] - load() :: Loading tanks from the API');\n\n        if(this.in_progress)\n        {\n            console.log('[TankService] - load() :: Loading is already in progress, exit.');\n            return null;\n        }\n\n        this.in_progress = true;\n\n        let result:any = await this.http\n            .get(`${this.configuration.API_ENDPOINT}/tanks-dep/${this.configuration.DEPARTMENT_ID}`)\n            .toPromise();\n            \n        console.log('[TankService] - load() :: Tanks loaded from the API.');\n\n        console.log('[TankService] - load() :: Deleting tanks from the cache.');\n        await this.deleteAll();\n        console.log('[TankService] - load() :: Tanks deleted from the cache.');\n\n        console.log('[TankService] - load() :: Creating tanks in the cache.');\n        let promises = result.Tank.map(async (item) => {\n            await this.create(item);\n        });\n        console.info('[TankService] - load() :: Tanks loaded from the API and cached.');\n        this.events.publish('tanks:loaded');\n        console.info('[TankService] - load() :: Event \"tanks:loaded\" published.');\n\n        this.in_progress = false;\n\n        return Promise.all(promises)\n    }\n\n    async findAll() {\n        let query = 'SELECT trailer_id, trailer_no, trailer_name FROM tanks';\n        return this.storage.executeSql(query);\n    }\n\n    async find(id: Number) {\n        let query = 'SELECT trailer_id, trailer_no, trailer_name FROM tanks WHERE trailer_id = (?)';\n        return this.storage.executeSql(query, [id]);\n    }\n\n    async deleteAll() {\n        console.log('[TankService] - deleteAll() :: Deleting tanks from the cache.');\n        return Promise.all([\n            this.storage.executeSql('DELETE FROM tanks'),\n            this.storage.executeSql('DELETE FROM SQLITE_SEQUENCE WHERE name=\"tanks\"')\n        ]);\n    }\n\n    async create(tank) {\n        let query = 'INSERT INTO tanks (trailer_id, trailer_no, trailer_name) VALUES (?, ?, ?)';\n        return this.storage.executeSql(query, [tank.trailer_id, tank.trailer_no, tank.trailer_name]);\n    }\n}\n\n","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { DatePipe }     from '@angular/common';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimesheetService {\n\n\n\n  constructor(private http:HttpClient, private configuration: Config, private storage: SqlService) {\n    console.log('[TimesheetService] - constructor() :: ');            \n\n  }\n\n  public init() {\n    console.log('[TimesheetService] - init() :: Preparing database table');    \n    return this.storage.executeSql(`CREATE TABLE IF NOT EXISTS timesheets (\n      timesheet_id INTEGER PRIMARY KEY AUTOINCREMENT,\n      operator_id INTEGER, \n      plant_id INTEGER, \n      start_date TEXT,\n      end_date TEXT, \n      start_hours TEXT, \n      end_hours TEXT, \n      synced_at TEXT\n    )`);\n  }\n\n  async create(data) {\n    console.log('[TimesheetService] - create() :: Creating timesheet in the cache:', data);\n    let insert_query = 'INSERT INTO timesheets (operator_id, plant_id, start_date, end_date, start_hours, end_hours) VALUES (?, ?, ?, ?, ?, ?)';\n    let result = await this.storage.executeSql(\n      insert_query,\n      [\n        data.operator_id,\n        data.plant_id,\n        data.start_date,\n        data.end_date,\n        data.start_hours,\n        data.end_hours\n      ]\n    );\n\n    console.log('[TimesheetService] - create() :: Timesheet created in the cache:', result.res.insertId);\n\n    try {\n      console.log('[TimesheetService] - create() :: Creating timesheetService in the API:', result);\n      data.timesheet_id = result.res.insertId;\n      let api_result = await this.http\n        .post(this.configuration.API_ENDPOINT + '/air-trans/', data)\n        .toPromise();\n\n        console.log('[TimesheetService] - create() :: Timesheet created in the API:', api_result);\n\n        console.log('[TimesheetService] - create() :: Updating timesheet in the cache as synced:', api_result);\n        let update_query  = `UPDATE timesheets SET synced_at = (?) WHERE timesheet_id = (?)`;\n        let datePipe      = new DatePipe(this.configuration.LOCALE);\n        result            = await this.storage.executeSql(\n                                update_query, \n                                [\n                                datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), \n                                data.timesheet_id\n                                ]\n        );\n        console.log('[TimesheetService] - create() :: Timesheet updated in the cache as synced:', result);\n        console.info('[TimesheetService] - create() :: Timesheet uploaded and marked as synced');\n\n    }\n    catch (exception) {\n      console.warn('[TimesheetService] - create() :: Failed to create timesheet in the API:', data, exception);\n    }\n    return result;\n  }\n\n  async upload() {\n    console.log('[TimesheetService] - upload() :: Finding non-synced timesheets');\n    let select_query = 'SELECT timesheet_id, operator_id, plant_id, start_date, end_date, start_hours, end_hours, synced_at FROM timesheets WHERE synced_at IS NULL';\n    let timesheets = await this.storage.executeSql(select_query);\n    console.log('[TimesheetService] - upload() :: Found non-synced timesheets:', timesheets.res.rows.length);    \n    let promises = Array.from(timesheets.res.rows).map(async (timesheet: any) => {\n      console.log('[TimesheetService] - upload() :: Updating non-synced timesheet', timesheet);\n\n      await this.http\n        .post(this.configuration.API_ENDPOINT + '/air-trans/', timesheet)\n        .toPromise();\n\n      let update_query = 'UPDATE timesheets SET synced_at = (?) WHERE timesheet_id = (?)';\n      let datePipe = new DatePipe(this.configuration.LOCALE);\n      return await this.storage.executeSql(update_query, [datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), timesheet.timesheet_id])\n    });\n    return Promise.all(promises)\n  }\n}","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { DatePipe }     from '@angular/common';\nimport {Config} from '../../environments/config';\nimport { SqlService }   from './sql-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionService {\n\n\n\n    constructor(private http: HttpClient, private configuration: Config, private storage: SqlService) {\n        console.log('[TransactionService] - constructor() :: ');\n\n\n    }\n\n    public init() {\n        console.log('[TransactionService] - init() :: Preparing database table');\n        return  this.storage.executeSql(`CREATE TABLE IF NOT EXISTS transactions (\n            transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            pad_id TEXT,\n            operator_id INTEGER,\n            plant_id INTEGER,\n            trailer_id INTEGER,\n            odometer INTEGER,\n            battery_percentage INTEGER,\n            long TEXT,\n            lat TEXT,\n            end_value TEXT,\n            end_total_value TEXT,\n            transaction_end_date TEXT,\n            synced_at TEXT\n        )`);\n    }\n    \n    public initRefills() {\n        console.log('[TransactionService] - init() :: Preparing database table 2');\n        return  this.storage.executeSql(`CREATE TABLE IF NOT EXISTS refills (\n            transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            operator_id INTEGER,\n            from_trailer_id INTEGER,\n            to_trailer_id INTEGER,\n            amount TEXT,\n            synced_at TEXT\n        )`);\n    }    \n\n    async create(transaction) {\n\n        console.log('[TransactionService] - create() :: Creating transaction in the cache:', transaction);\n        let datePipe = new DatePipe(this.configuration.LOCALE);\n        // transaction.transaction_end_date is a timestamp, but in local time ...\n        let transaction_end_date            = transaction.transaction_end_date;\n        transaction_end_date                = transaction_end_date + (new Date()).getTimezoneOffset() * 60;\n        transaction.transaction_end_date    = datePipe.transform(new Date(transaction_end_date * 1000), 'y-MM-dd HH:mm:ss')\n        let insert_query = `INSERT INTO transactions (\n            pad_id, \n            operator_id, \n            plant_id, \n            trailer_id, \n            odometer, \n            battery_percentage, \n            long, \n            lat, \n            end_value, \n            end_total_value, \n            transaction_end_date\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;\n\n        let result = await this.storage.executeSql(\n            insert_query,\n            [\n                transaction.pad_id,\n                transaction.operator_id,\n                transaction.plant_id,\n                transaction.trailer_id,\n                transaction.odometer,\n                transaction.battery_percentage,\n                transaction.long,\n                transaction.lat,\n                transaction.end_value,\n                transaction.end_total_value,\n                transaction.transaction_end_date\n            ]\n        );\n\n        console.log('[TransactionService] - create() :: Transaction created in the cache:', transaction);\n\n        try {\n            console.log('[TransactionService] - create() :: Uploading transaction in the API:', result);\n            transaction.transaction_id = result.res.insertId;\n            let api_result = await this.http\n                .post(this.configuration.API_ENDPOINT + '/transaction/', transaction)\n                .toPromise();\n\n            console.log('[TransactionService] - create() :: Transaction uploaded to the API:', api_result);\n\n            console.log('[TransactionService] - create() :: Marking transaction in the cache as synced:', api_result);\n            let update_query = 'UPDATE transactions SET synced_at = (?) WHERE transaction_id = (?)';\n            result = await this.storage.executeSql(update_query, [datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), transaction.transaction_id])\n            console.log('[TransactionService] - create() :: Transaction marked in the cache as synced:', result);\n            console.info('[TransactionService] - create() :: Transaction uploaded and marked as synced');\n\n        }\n        catch (exception) {\n            console.warn('[TransactionService] - create() :: Failed to create transaction in the API:', transaction, exception);\n        }\n        return result;\n    }\n    \n    \n    async createRefill(transaction) {\n\t\t\n\n\t\tlet api_result = await this.http\n\t\t.post(this.configuration.API_ENDPOINT + '/tank-refill/', transaction)\n\t\t.toPromise();\n\t\t\n\t\t\n\t\treturn api_result;\n\t\t\n/* \t\talert(\"Saving locally\");\n\t\t\n\t\t\n        console.log('[TransactionService] - create() :: Creating Refill in the cache:', transaction);\n        let insert_query = `INSERT INTO refills (operator_id, from_trailer_id, to_trailer_id, amount) VALUES (?, ?, ?, ?)`;\n\t\t\n\t\t\n\t\t\n        let result = await this.storage.executeSql(\n          insert_query,\n          [\n            transaction.operator_id,\n            transaction.from_trailer_id,\n            transaction.to_trailer_id,\n            transaction.amount,\n          ]\n        );\n\t\t\nalert(JSON.stringify(result));\n\t\t\nalert(\"Transaction created in the cache\");\n\n\nalert(result.res.insertId);\n\n        console.log('[TransactionService] - create() :: Transaction created in the cache:', result.res.insertId);\n\n        try {\n          console.log('[TransactionService] - create() :: Creating TransactionService in the API:', result);\n\t\t  alert(\"Creating in API\");\n          transaction.transaction_id = result.res.insertId;\n          let api_result = await this.http\n            .post(this.configuration.API_ENDPOINT + '/tank-refill/', transaction)\n            .toPromise();\n\n            console.log('[TransactionService] - create() :: Transaction created in the API:', api_result);\nalert(\"Transaction created in the API\");\n            console.log('[TransactionService] - create() :: Updating Transaction in the cache as synced:', api_result);\n            let update_query  = `UPDATE refills SET synced_at = (?) WHERE transaction_id = (?)`;\n            let datePipe      = new DatePipe(this.configuration.LOCALE);\n            result            = await this.storage.executeSql(\n                                    update_query, \n                                    [\n                                    datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), \n                                    transaction.dipreading_id\n                                    ]\n            );\n\t\t\talert(\"Transaction updated in the cache as synced\");\n\t\t\t\n            console.log('[TransactionService] - create() :: Transaction updated in the cache as synced:', result);\n            console.info('[TransactionService] - create() :: Transaction uploaded and marked as synced');\n\t\t\t\n\n        }\n        catch (exception) {\n\t\t\talert(\"failed in API\");\n\t\t\talert(JSON.stringify(exception));\n\t\t\talert(JSON.stringify(transaction));\n\t\t\t\n          console.warn('[TransactionService] - create() :: Failed to create Transaction in the API:', transaction, exception);\n        }\n        return result; */\n    }    \n    \n    \n\n    async upload() {\n        console.log('[TransactionService] - upload() :: Finding non-synced transactions');\n        let select_query = `SELECT \n                          transaction_id, \n                          pad_id, \n                          operator_id, \n                          plant_id, \n                          trailer_id, \n                          odometer, \n                          battery_percentage, \n                          long, \n                          lat, \n                          end_value, \n                          end_total_value, \n                          transaction_end_date, \n                          synced_at \n                          FROM transactions WHERE synced_at IS NULL`;\n\n        let transactions = await this.storage.executeSql(select_query).then(\n            async data => {\n                console.log('[TransactionService] - upload() :: Found non-synced transaction:', data.res.rows.length);\n                \n                let promises = [];\n                \n                for(let i = 0; i < data.res.rows.length; i++) {\n\n                    let transaction = data.res.rows.item(i);\n\n                    \n                    await this.http\n                        .post(this.configuration.API_ENDPOINT + '/transaction/', transaction)\n                        .toPromise();\n\n                    let update_query = 'UPDATE transactions SET synced_at = (?) WHERE transaction_id = (?)';\n                    let datePipe = new DatePipe(this.configuration.LOCALE);\n\n                    let promise = await this.storage.executeSql(\n                        update_query,\n                        [\n                            datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'),\n                            transaction.transaction_id\n                        ]\n                    );\n                    \n                    promises.push(promise);                    \n                    \n                    \n                }\n                \n                return promises;\n            }\n        );\n        \n        \n        \n        let transactions2 = await this.storage.executeSql(\"SELECT * FROM refills WHERE synced_at IS NULL\").then(\n            async data => {\n                console.log('[TransactionService] - upload() :: Found non-synced refill transaction:', data.res.rows.length);\n                \n                let promises = [];\n                \n                for(let i = 0; i < data.res.rows.length; i++) {\n\n                    let transaction = data.res.rows.item(i);\n\n                    \n                    await this.http\n                        .post(this.configuration.API_ENDPOINT + '/tank-refills/', transaction)\n                        .toPromise();\n\n                    let update_query = 'UPDATE refills SET synced_at = (?) WHERE transaction_id = (?)';\n                    let datePipe = new DatePipe(this.configuration.LOCALE);\n\n                    let promise = await this.storage.executeSql(\n                        update_query,\n                        [\n                            datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'),\n                            transaction.transaction_id\n                        ]\n                    );\n                    \n                    promises.push(promise);                    \n                    \n                    \n                }\n                \n                return promises;\n            }\n        );        \n        \n        \n        \n\n        return Promise.all(transactions);\n    }\n    \n    \n    async uploadRefills() {\n        console.log('[TransactionService] - upload() :: Finding non-synced transactions');\n        let select_query = `SELECT * FROM refills WHERE synced_at IS NULL`;\n\n        \n        \n        \n        let transactions = await this.storage.executeSql(select_query).then(\n            async data => {\n                console.log('[TransactionService] - upload() :: Found non-synced refill transaction:', data.res.rows.length);\n                \n                let promises = [];\n                \n                for(let i = 0; i < data.res.rows.length; i++) {\n\n                    let transaction = data.res.rows.item(i);\n\n                    \n                    await this.http\n                        .post(this.configuration.API_ENDPOINT + '/tank-refills/', transaction)\n                        .toPromise();\n\n                    let update_query = 'UPDATE refills SET synced_at = (?) WHERE transaction_id = (?)';\n                    let datePipe = new DatePipe(this.configuration.LOCALE);\n\n                    let promise = await this.storage.executeSql(\n                        update_query,\n                        [\n                            datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'),\n                            transaction.transaction_id\n                        ]\n                    );\n                    \n                    promises.push(promise);                    \n                    \n                    \n                }\n                \n                return promises;\n            }\n        );        \n        \n        \n        \n\n        return Promise.all(transactions);\n    }    \n    \n    \n\n}\n\n"],"sourceRoot":"webpack:///"}