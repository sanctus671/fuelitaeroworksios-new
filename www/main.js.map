{"version":3,"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/models/bluetooth-message.ts","./src/app/pages/settings/settings.page.ts","./src/app/providers/bluetooth-service.ts","./src/app/providers/configuration-service.ts","./src/app/providers/dipreading-service.ts","./src/app/providers/events-service.ts","./src/app/providers/operator-service.ts","./src/app/providers/plant-service.ts","./src/app/providers/sql-service.ts","./src/app/providers/tank-service.ts","./src/app/providers/timesheet-service.ts","./src/app/providers/transaction-service.ts","./src/environments/config.ts","./src/environments/environment.ts","./src/main.ts","./node_modules/@ionic/core/dist/esm|lazy|/^/.*/.entry/.js$/|include: /.entry/.js$/|exclude: /.system/.entry/.js$/|groupOptions: {}|namespace object","./src/app/app.component.scss","./src/app/app.component.html","./src/app/pages/settings/settings.page.html"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('./pages/login/login.module').then( m => m.LoginPageModule)\n  },\n  {\n    path: 'tabs',\n    loadChildren: () => import('./pages/tabs/tabs.module').then(m => m.TabsPageModule)\n  }\n];\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","import {fetch as fetchPolyfill} from 'whatwg-fetch';\nwindow.fetch = fetchPolyfill;\n\nimport { Component} from '@angular/core';\nimport { ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Platform }             from '@ionic/angular';\nimport { Events }               from './providers/events-service';\nimport { ToastController }      from '@ionic/angular';\nimport { PopoverController }    from '@ionic/angular';\n\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\nimport { Network } from '@ionic-native/network/ngx';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\n\nimport { SettingsPage } from './pages/settings/settings.page';\n\nimport { PlantService }         from './providers/plant-service';\nimport { OperatorService }      from './providers/operator-service';\nimport { ConfigurationService } from './providers/configuration-service';\nimport { TransactionService }   from './providers/transaction-service';\nimport { TankService }         from './providers/tank-service';\nimport { TimesheetService }     from './providers/timesheet-service';\nimport { DipReadingService }     from './providers/dipreading-service';\nimport { BluetoothService }     from './providers/bluetooth-service';\nimport { Storage } from '@ionic/storage-angular';\n\n\n\ndeclare var bluetoothle:any;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss']\n})\nexport class AppComponent {\n\n\n    constructor(private platform: Platform,\n        protected toastController: ToastController,\n        protected popoverController: PopoverController,\n        protected plantService: PlantService,\n        protected tankService: TankService,\n        protected operatorService: OperatorService,\n        protected transactionService: TransactionService,\n        protected timesheetService: TimesheetService,\n        protected dipReadingService: DipReadingService,\n        protected configurationService: ConfigurationService,\n        protected bluetoothService: BluetoothService,\n        protected events: Events,\n        private splashScreen: SplashScreen,\n        private network:Network,\n        private statusBar: StatusBar,\n        private router: Router, private storage:Storage) {\n\t\t\n\n\n        this.events.subscribe('database:sync', event => {\n            this.sync();\n        });\n\n        this.events.subscribe('user:logout', event => {\n            this.logout();\n        });\n\n        this.events.subscribe('settings:open', event => {\n            this.settings(event);\n        });\n\n\n        this.platform.ready().then(() => {\n            \n\n\n\t\t\t\n            this.splashScreen.hide();\n\n            \n            \n            \n            console.log('[FuelITApp] - constructor() :: Detecting platforms:', this.platform.platforms());\n\n            console.log('[FuelITApp] - constructor() :: Preparing services.');\n            Promise.all([\n                this.operatorService.init(),\n                this.plantService.init(),\n                this.tankService.init(),\n                this.transactionService.init(),\n                this.transactionService.initRefills(),\n                this.timesheetService.init(),\n                this.dipReadingService.init()         \n            ]).then(\n                result => {\n                    console.log('[FuelITApp] - constructor() :: Services prepared.');\n                    this.sync();\n                    \n                }\n            )\n\t\t\t\n\t\n\n            this.platform.pause.subscribe(() => {\n                console.log('[FuelITApp] - constructor() :: App paused');\n            });\n\n            this.platform.resume.subscribe(() => {\n                console.log('[FuelITApp] - constructor() :: App resumed');\n            });\n\n\n            this.network.onConnect().subscribe(() => {\n                this.onNetworkConnected();\n            });\n\n            this.network.onDisconnect().subscribe(() => {\n                this.onNetworkDisconnected();\n            });\n\n      \n            if (this.platform.is(\"android\")) {\n                //this.statusBar.backgroundColorByHexString(\"#952517\");\n                //this.statusBar.styleLightContent();\n                this.statusBar.styleDefault();\n            }\n            else{\n                this.statusBar.styleLightContent();\n            }\n            \n\n\t\t\t\n        });\n\n    }\n    \n\n    \n    \n    protected onNetworkConnected() {\n        console.log('[FuelITApp] - onNetworkConnected() :: Network connection detected.');\n        this.events.publish('database:sync');\n    }\n\n    protected onNetworkDisconnected() {\n        console.log('[FuelITApp] - onNetworkDisconnected() :: Network disconnected.');\n    }\n\n    async settings(event) {\n        \n        const popover = await this.popoverController.create({\n          component: SettingsPage,\n          componentProps:            \n              {\n                transactionService: this.transactionService,\n                timesheetService: this.timesheetService,\n                operatorService: this.operatorService,\n                plantService: this.plantService,\n                tankService: this.tankService,\n                dipReadingService: this.dipReadingService,\n                configurationService: this.configurationService,\n            },\n          cssClass: 'popover-settings',\n          event: event,\n          translucent: true\n        });\n        await popover.present();\n\n        const { data, role } = await popover.onDidDismiss();\n\n        \n        if (data && data.refresh) {\n            this.router.navigateByUrl('/');\n        }        \n        \n        \n    }    \n        \n\n    \n\n    protected logout() {\n        console.log('[FuelITApp] - logout() :: Logging out operator.');\n        this.configurationService.remove('operator').then(\n            result => {\n                this.events.publish('user:logged_out');\n            },\n            failuer => {\n\n            }\n        );\n    }\n\n    protected sync() {\n        console.log('[FuelITApp] - sync() :: Synchronizing databases.');\n\n        Promise.all([\n            // configurationService.get('operator'),\n            this.transactionService.upload(),\n            this.timesheetService.upload(),\n            this.dipReadingService.upload(),\n            this.operatorService.load(),\n            this.plantService.load(),\n            this.tankService.load(),\n        ])\n            .then(\n            results => {\n                console.log('[FuelITApp] - sync() :: Databases synchronized.');\n                let toast = this.toastController.create({\n                    message: 'Database synced',\n                    duration: 2000\n                }).then((el) => {\n                    this.events.publish('database:synced');\n                    el.present();\n                })            \n                \n                \n                \n            },\n            reason => {\n                console.warn('[FuelITApp] - sync() :: Failed to synchronize databases:', reason);\n            }\n            );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\nimport {CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\nimport { Network } from '@ionic-native/network/ngx';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { AppVersion } from '@ionic-native/app-version/ngx';\n\nimport { IonicStorageModule } from '@ionic/storage-angular';\nimport { HttpClientModule } from '@angular/common/http';\n\n\nimport {SettingsPage} from './pages/settings/settings.page';\n\n\n@NgModule({\n  declarations: [AppComponent, SettingsPage],\n  entryComponents: [SettingsPage],\n  imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule, IonicStorageModule.forRoot(), HttpClientModule, CommonModule, FormsModule,  ReactiveFormsModule  ],\n  providers: [{ provide: RouteReuseStrategy, useClass: IonicRouteStrategy }, Geolocation, StatusBar, Network, SplashScreen, AppVersion],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","export class BluetoothMessage {\n    public static readonly ESCAPE           = String.fromCharCode(0x0A);\n    public static readonly FRAME_BOUNDARY   = String.fromCharCode(0x1C);\n}\n\nexport class BluetoothUUID {\n    public static readonly SERVICE           = \"569A1101-B87F-490C-92CB-11BA5EA5167C\";\n    public static readonly READ           = \"569A2000-B87F-490C-92CB-11BA5EA5167C\";\n    public static readonly WRITE           = \"569A2001-B87F-490C-92CB-11BA5EA5167C\";\n}\n\nexport class BluetoothTransactionRequest {\n\n    public toString():string\n    {\n        return `${BluetoothMessage.FRAME_BOUNDARY}{\"type\":\"transactionRequest\"}${BluetoothMessage.FRAME_BOUNDARY}`;\n    }\n    \n    public toArrayBuffer():any\n    {\n        let sendString = this.toString();\n        var array = new Uint8Array(sendString.length);\n        for (var i = 0, l = sendString.length; i < l; i++) {\n            array[i] = sendString.charCodeAt(i);\n         }\n        return array.buffer;       \n    }\n    \n    public toChunkedArrayBuffer():any\n    {\n        let sendString = this.toString();\n        let chunks = sendString.match(/.{1,10}/g);\n        let chunkedBuffer = []\n        \n        for (let chunk of chunks){\n            var array = new Uint8Array(chunk.length);\n            for (var i = 0, l = chunk.length; i < l; i++) {\n                array[i] = chunk.charCodeAt(i);\n             }\n            chunkedBuffer.push(array.buffer);             \n        }\n        \n        return chunkedBuffer       \n    } \n}\n\nexport class BluetoothAcknowledgement {\n\n    public toString():string\n    {\n        return `${BluetoothMessage.FRAME_BOUNDARY}{\"type\":\"OK\"}${BluetoothMessage.FRAME_BOUNDARY}`;\n    }\n    \n    public toArrayBuffer():any\n    {\n        let sendString = this.toString();\n        var array = new Uint8Array(sendString.length);\n        for (var i = 0, l = sendString.length; i < l; i++) {\n            array[i] = sendString.charCodeAt(i);\n         }\n         return array.buffer;        \n    }    \n\n    public toChunkedArrayBuffer():any\n    {\n        let sendString = this.toString();\n        let chunks = sendString.match(/.{1,10}/g);\n        let chunkedBuffer = []\n        \n        for (let chunk of chunks){\n            var array = new Uint8Array(chunk.length);\n            for (var i = 0, l = chunk.length; i < l; i++) {\n                array[i] = chunk.charCodeAt(i);\n             }\n            chunkedBuffer.push(array.buffer);             \n        }\n        \n        return chunkedBuffer       \n    }    \n    \n        \n}\n\nexport class BluetoothResponse {\n\n    private data:any    = null;\n    private type:string = null;\n\n    constructor(rawBuffer:any, isString:boolean) {\n        \n        //convert raw from array buffer to string as per BLE central plugin https://github.com/don/cordova-plugin-ble-central#typed-arrays\n        let raw:string = \"\";\n        if (!isString){\n            raw = this.bytesToString(rawBuffer);\n        }\n        else{\n            raw = rawBuffer;\n        }\n        \n        console.debug(`[BluetoothResponse] - constructor() :: \"${raw}\"`);\n        \n        if(raw != `${BluetoothMessage.FRAME_BOUNDARY}` && raw != `${BluetoothMessage.ESCAPE + BluetoothMessage.FRAME_BOUNDARY}` && raw != '' ) {\n            try {\n                \n                raw = raw.replace(/\\x1C/g,'').replace(/\\x0A/g,'');\n                \n                let packet      = JSON.parse(String(raw.slice(0, raw.length)));\n                this.data       = packet.data;\n                this.type       = packet.type;\n            }\n            catch(error) {\n                console.error('[BluetoothResponse] - constructor() ::', error);               \n                throw error;\n            }\n        }\n    }\n    \n    private bytesToString(buffer) {\n        return String.fromCharCode.apply(null, new Uint8Array(buffer));\n    }\n\n    public getData():any {\n        return this.data;\n    }\n\n    public isBoundaryOnly()\n    {\n        return this.data == null\n    }\n\n    public isEmpty():Boolean\n    {\n        return Object.keys(this.data).length == 0;\n    }\n}","import { Component }            from '@angular/core';\nimport { PopoverController }       from '@ionic/angular';\nimport { Events }               from '../../providers/events-service';\n\n@Component({\n  selector: 'page-settings',\n  templateUrl: 'settings.page.html',\n})\nexport class SettingsPage {\n\n  protected events: Events;\n  protected viewController: PopoverController;\n\n  constructor(viewController: PopoverController, events: Events) {\n    this.viewController   = viewController;\n    this.events           = events;\n  }\n\n  public refresh() {\n    console.log('[SettingsPage] - refresh() :: ');\n\n    this.events.publish('database:sync');\n    this.viewController.dismiss({ refresh: false });\n\n  }\n\n  public logout() {\n    console.log('[SettingsPage] - logout() :: ');\n    \n    this.events.publish('user:logout');\n    this.viewController.dismiss({ refresh: true });\n\n  }\n\n  public error() {\n    console.log('[SettingsPage] - error() :: ');\n    this.viewController.dismiss({ refresh: true });\n    throw new Error('Something went booboo');\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AlertController} from '@ionic/angular';\nimport { ToastController }      from '@ionic/angular';\nimport { Events }               from './events-service';\n\nimport 'rxjs/add/operator/map';\n\nimport { BluetoothMessage } from '../models/bluetooth-message';\nimport { BluetoothTransactionRequest } from '../models/bluetooth-message';\nimport { BluetoothAcknowledgement } from '../models/bluetooth-message';\nimport { BluetoothResponse } from '../models/bluetooth-message';\nimport { BluetoothUUID } from '../models/bluetooth-message';\n\nimport { Storage } from '@ionic/storage-angular';\n\ndeclare var ble:any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BluetoothService {\n\n    protected responses:Array<BluetoothResponse> = [];\n    protected deviceCount:number;\n    protected connected: boolean;\n    protected deviceCheckInterval:any;\n    protected previouslyConnectedMeter: string;\n    \n    protected devices:Array<any>;\n    \n    protected chunkedResponse:string;\n    \n    \n    constructor(private events: Events, private toastController:ToastController, private alertCtrl:AlertController, private storage:Storage) {\n\n        this.storage.create();\n        this.deviceCount = 0;\n        this.connected = false;\n        \n        //this.deviceCheckInterval = setInterval(() => {\n            //this.checkDevices();\n        //},10000);        \n        \n        this.previouslyConnectedMeter = \"\";\n        this.storage.get(\"previouslyConnectedMeter\").then((uuid) => {\n            if (uuid){\n                this.previouslyConnectedMeter = uuid;\n            }\n        }).catch(() => {\n            \n        });\n        \n        \n        this.devices = [];\n        \n        this.chunkedResponse = \"\";\n    }\n  \n\n    \n    private checkDevices(){\n        this.scanDevices().then((devices:Array<any>) => {\n\n            let count = devices.length;\n            if (count !== this.deviceCount){\n                this.deviceCount = count;\n                //prompt user if they want to connect to differant device\n                this.changeDevice(devices);\n            }                \n        });               \n    }\n    \n\n    public connect(device:any) {\n        //console.log('[BluetoothService] - connect() :: ');\n \n            this.events.publish('meter:connecting');\n            \n            ble.isConnected(device.address, () => {\n                this.onConnect(device, {status:\"device was already connected\"});\n            }, () => {\n                ble.connect(device.address,\n                (deviceDetails) => this.onConnect(device, deviceDetails),\n                (failure) => this.onFail(failure));    \n            });          \n            \n\n\n    }\n\n    public list() {\n        //console.log(`[BluetoothService] - list() :: List bound devices`);\n        this.responses = new Array();\n        this.events.publish('meter:listing');\n        \n        \n        this.scanDevices().then((devices:Array<any>) => {\n\n            if (devices.length === 1){\n                this.connect(devices[0]);\n                this.storage.set(\"previouslyConnectedMeter\", devices[0].address);\n                return;\n            }\n            else{\n                if (this.previouslyConnectedMeter){\n                    for (let device of devices){\n                        if (device.address === this.previouslyConnectedMeter){\n                            this.connect(device);\n                            return;\n                        }\n                    }\n                }\n                else{\n                    this.selectDevice(devices);\n                }\n            }                \n        });\n\n        \n        \n    }\n    \n    private scanDevices(){\n        \n        return new Promise((resolve, reject) => {\n            \n            let devices:Array<any> = [];\n            let addedDevices:Array<string> = [];\n            ble.scan([BluetoothUUID.SERVICE],5,(foundDevice) => \n                {\n\n                    let newDevice = {address: foundDevice.id, name: foundDevice.name};\n                    \n                    if (newDevice.name && addedDevices.indexOf(newDevice.name) < 0){\n                        //alert(JSON.stringify(foundDevice))\n                        devices.push(newDevice);\n                        addedDevices.push(newDevice.name);\n                    }\n                }\n            ,(failure) => this.onFail(failure));   \n            \n            setTimeout(() => {\n                resolve(devices);\n            },5500);\n            \n            \n        });        \n        \n        \n       \n    }\n    \n    private selectDevice(devices){\n        this.events.publish('meter:listingselect');\n        \n        this.deviceCount = devices.length;\n        \n        \n        let inputs:Array<any> = [];\n        let inputsIndexed = {};\n        for (var index in devices){\n            let device = devices[index]\n            inputs.push({\n                type:\"radio\",\n                name:\"device\" + index,\n                value:index,\n                label:device.name\n            });\n            inputsIndexed[index] = device;\n        }\n        \n\n        \n        this.alertCtrl.create({\n            header: 'Select Device',\n            inputs: inputs,\n            buttons: [\n            {\n                text: 'Cancel',\n                role: 'cancel',\n                handler: data => {\n                  console.log('Cancel clicked');\n                }\n            },\n            {\n                text: 'Connect',\n                handler: deviceIndex => {\n                  if (deviceIndex){\n                      this.events.publish('meter:listingselected');\n                      let device = inputsIndexed[deviceIndex];\n                      this.storage.set(\"previouslyConnectedMeter\", device.address);\n                      this.connect(device);\n                  }\n                }\n            }\n          ]\n        }).then((el) => {\n            el.present();\n        });       \n    }\n    \n    \n    private changeDevice(devices){\n        \n        let inputs:Array<any> = [];\n        let inputsIndexed = {};\n        for (var index in devices){\n            let device = devices[index]\n            inputs.push({\n                type:\"radio\",\n                name:\"device\" + index,\n                value:index,\n                label:device.name\n            });\n            inputsIndexed[index] = device;\n        }\n        \n        this.alertCtrl.create({\n            header: 'Select Device',\n            subHeader: 'The devices in your bluetooth network have changed',\n            message: 'If you wish to change to another meter, select it from the list, otherwise press cancel to continue on the current meter.',\n            inputs: inputs,\n            buttons: [\n            {\n                text: 'Cancel',\n                role: 'cancel',\n                handler: data => {\n                  console.log('Cancel clicked');\n                }\n            },\n            {\n                text: 'Connect',\n                handler: deviceIndex => {\n                  if (deviceIndex){\n                      \n                      let device = inputsIndexed[deviceIndex];\n                        this.events.publish('meter:connecting');\n                        this.storage.set(\"previouslyConnectedMeter\", device.address);\n                        this.connect(device);\n                        \n                        \n                  }\n                }\n            }\n          ]\n        }).then((el) => {\n            el.present();\n        });      \n    }    \n\n    public request(device) {\n        //console.log('[BluetoothService] - request() :: Sending transaction request to the BT device');\n\n        this.events.publish('meter:reading');     \n        let chunkedBuffer = (new BluetoothTransactionRequest()).toChunkedArrayBuffer();\n        \n        for (let chunk of chunkedBuffer){\n            ble.write(device.address, BluetoothUUID.SERVICE, BluetoothUUID.WRITE, chunk,\n                () => this.onRequestComplete(),\n                (failure) => this.onFail(failure));            \n        }           \n        \n\n\n    }\n\n    public requestAll() {\n        //console.log('[BluetoothService] - requestAll() :: Sending transaction request to the BT device');\n    }\n\n    public acknowledge(device) {\n        //console.log('[BluetoothService] - acknowledge() :: Sending acknowledge to the BT device');\n\n        let chunkedBuffer = (new BluetoothAcknowledgement()).toChunkedArrayBuffer();    \n        for (let chunk of chunkedBuffer){\n            ble.write(device.address, BluetoothUUID.SERVICE, BluetoothUUID.WRITE, chunk,\n                () => this.onAcknowledge(device),\n                (failure) => this.onFail(failure));            \n        }                 \n\n    }\n\n    protected onConnect(device:any, deviceDetails:any) {\n        //console.info(`[BluetoothService] - onConnect() :: Connected to BT device ${device.address}.`);\n        this.alertCtrl.create({\n          header: 'Success',\n          subHeader: 'You are now connected to ' + device.name,\n          buttons: ['Dismiss']\n        }).then((el) => {\n            el.present();\n        });  \n        \n        /*\n         * for debugging purposes\n        let alertBox2 = this.alertCtrl.create({\n          title: 'Device Details',\n          subTitle: JSON.stringify(deviceDetails),\n          buttons: ['Dismiss']\n        });\n        alertBox2.present();     \n        \n        */       \n\n        ble.startNotification(device.address, BluetoothUUID.SERVICE, BluetoothUUID.READ,\n            (data) => this.onData(data, device), \n            (failure) => this.onFail(failure));\n            \n        this.request(device);\n        \n        /*\n        setTimeout(() => {\n            let alertBox = this.alertCtrl.create({\n              title: 'Request Again',\n              subTitle: 'Make the request again',\n              buttons: [      {\n                text: 'Cancel',\n                role: 'cancel',\n                handler: () => {\n                  this.events.publish('meter:complete');\n                  ble.disconnect(device.address); \n                }\n              },\n              {\n                text: 'Request',\n                handler: () => {\n                    this.request(device);\n                }\n              }]\n            });\n            alertBox.present();              \n        },10000);   \n        \n        */      \n        \n        \n        \n    }\n\n    protected onData(data, device) {\n        \n        /*\n        let alertBox = this.alertCtrl.create({\n          title: 'Response Received',\n          subTitle: String.fromCharCode.apply(null, new Uint8Array(data)),\n          buttons: ['Dismiss']\n        });\n        alertBox.present();  \n        \n        */       \n        \n        \n        let response;\n        try {\n            response = new BluetoothResponse(data,false);\n        } catch (error) {\n            \n            this.chunkedResponse = this.chunkedResponse + String.fromCharCode.apply(null, new Uint8Array(data));\n            \n            /*\n            let alertBox2 = this.alertCtrl.create({\n              title: 'Current Position',\n              subTitle: this.chunkedResponse,\n              buttons: ['Dismiss']\n            });\n            alertBox2.present();  \n            \n            */          \n            \n            try{\n                \n                response = new BluetoothResponse(this.chunkedResponse,true);\n         \n            } catch(error){\n            \n\n                /*\n                let alertBox3 = this.alertCtrl.create({\n                  title: 'Error converting response',\n                  subTitle: error,\n                  buttons: ['Dismiss']\n                });\n                alertBox3.present();\n                \n                */      \n\n            \n            \n                return;\n                \n            }\n            \n              /*  \n            let alertBox = this.alertCtrl.create({\n              title: 'Full Response Captured',\n              subTitle: this.chunkedResponse,\n              buttons: ['Dismiss']\n            });\n            alertBox.present();               \n            */\n            this.chunkedResponse = \"\";\n        \n            //this.onFail(error);\n\n        }\n\n        // If the response is just a boundary, drop the response.\n        if(response.isBoundaryOnly()) {\n            return;\n        }\n\n        // If the response is not empty, store it until we get an empty response\n        if (!response.isEmpty()) {\n            //console.log('[BluetoothService] - onData() :: Received data from the BT device', response);\n            this.responses.push(response);\n              \n            \n            this.acknowledge(device);\n        }\n        // If the response is empty, we reached the end of the stack, send the last data \n        else {\n            //console.log('[BluetoothService] - onData() :: Finished receiving data from the BT device.');\n            if(this.responses && this.responses.length > 0) {\n                //console.log('[BluetoothService] - onData() :: Publishing the received data.', this.responses);\n                //console.info('[BluetoothService] - onData() :: Publishing the received data.');\n                this.events.publish('meter:data', this.responses);\n            }\n\n            this.events.publish('meter:complete');\n            ble.disconnect(device.address); \n        }\n    }\n\n    protected onRequestComplete() {\n        \n        /*\n        let alertBox = this.alertCtrl.create({\n          title: 'Data Requested',\n          subTitle: 'Data successfully requested from meter',\n          buttons: ['Dismiss']\n        });\n        alertBox.present();     \n        \n        */\n        \n   \n        \n        //console.log('[BluetoothService] - onRequestComplete() :: Transaction request sent to BT device');\n    }\n\n    protected onAcknowledge(device) {\n        //console.log('[BluetoothService] - onAcknowledge() :: Acknowledge sent to BT device');      \n        \n        this.request(device);\n    }\n\n    protected onFail(failure) {\n        \n        let message = \"\";\n        \n        try {\n            message = JSON.stringify(failure);\n        }\n        catch(e){\n            message = failure;\n        }\n        \n        \n        console.warn('[BluetoothService] - onFail() :: ', failure);\n        this.events.publish('meter:complete');\n\n        let toast = this.toastController.create({\n            message: failure,\n            duration: 5000,\n            cssClass: 'toast-error'\n        }).then((el) => {\n            el.present();\n        });\n        this.events.publish('database:synced');\n        \n        this.storage.get(\"previouslyConnectedMeter\").then((uuid) => {\n            if (uuid){\n                ble.disconnect(uuid);\n            }\n        });               \n        \n    }\n}\n","import { Injectable }                           from '@angular/core';\nimport { Storage }                              from '@ionic/storage';\nimport 'rxjs/add/operator/map';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n\n  protected storage:Storage\n\n  constructor(storage:Storage) {\n    console.log('[ConfigurationService] - constructor() ::');       \n    this.storage = storage;\n  }\n\n  async get(key:string):Promise<any> {\n    console.log('[ConfigurationService] - get() :: ', key);\n    let result = await this.storage.get(key);\n    return new Promise(resolve => {\n      resolve(JSON.parse(result));\n    }) \n  }\n\n  async set(key:string, value:any):Promise<any> {\n    console.log('[ConfigurationService] - set() :: ', key, value)\n    this.storage.set(key, JSON.stringify(value)); \n  }\n\n  async remove(key:string):Promise<any> {\n    return this.storage.remove(key);\n  }\n}\n\n","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http'\nimport { DatePipe }     from '@angular/common';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DipReadingService {\n\n  constructor(private http:HttpClient, private configuration: Config, private storage: SqlService) {\n    console.log('[DipReadingService] - constructor() :: ');            \n\n  }\n\n  public init() {\n    console.log('[DipReadingService] - init() :: Preparing database table');    \n    return this.storage.executeSql(`CREATE TABLE IF NOT EXISTS dipreadings (\n      dipreading_id INTEGER PRIMARY KEY AUTOINCREMENT,\n      operator_id INTEGER, \n      trailer_id INTEGER, \n      reading TEXT,\n      synced_at TEXT\n    )`);\n  }\n\n  async create(data) {\n    console.log('[DipReadingService] - create() :: Creating DipReading in the cache:', data);\n    let insert_query = 'INSERT INTO dipreadings (operator_id, trailer_id, reading) VALUES (?, ?, ?)';\n    let result = await this.storage.executeSql(\n      insert_query,\n      [\n        data.operator_id,\n        data.trailer_id,\n        data.reading\n      ]\n    );\n\n    console.log('[DipReadingService] - create() :: DipReading created in the cache:', result.res.insertId);\n\n    try {\n      console.log('[DipReadingService] - create() :: Creating DipReadingService in the API:', result);\n      data.dipreading_id = result.res.insertId;\n      let api_result = await this.http\n        .post(this.configuration.API_ENDPOINT + '/tank-dip/', data)\n        .toPromise();\n\n        console.log('[DipReadingService] - create() :: DipReading created in the API:', api_result);\n\n        console.log('[DipReadingService] - create() :: Updating DipReading in the cache as synced:', api_result);\n        let update_query  = `UPDATE dipreadings SET synced_at = (?) WHERE dipreading_id = (?)`;\n        let datePipe      = new DatePipe(this.configuration.LOCALE);\n        result            = await this.storage.executeSql(\n                                update_query, \n                                [\n                                datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), \n                                data.dipreading_id\n                                ]\n        );\n        console.log('[DipReadingService] - create() :: DipReading updated in the cache as synced:', result);\n        console.info('[DipReadingService] - create() :: DipReading uploaded and marked as synced');\n\n    }\n    catch (exception) {\n      console.warn('[DipReadingService] - create() :: Failed to create DipReading in the API:', data, exception);\n    }\n    return result;\n  }\n\n  async upload() {\n    console.log('[DipReadingService] - upload() :: Finding non-synced DipReadings');\n    let select_query = 'SELECT dipreading_id, operator_id, trailer_id, reading, synced_at FROM dipreadings WHERE synced_at IS NULL';\n    let dipreadings = await this.storage.executeSql(select_query);\n    console.log('[DipReadingService] - upload() :: Found non-synced DipReading:', dipreadings.res.rows.length);    \n    let promises = Array.from(dipreadings.res.rows).map(async (dipreading: any) => {\n      console.log('[DipReadingService] - upload() :: Updating non-synced DipReading', dipreading);\n\n      await this.http\n        .post(this.configuration.API_ENDPOINT + '/tank-dip/', dipreading)\n        .toPromise();\n\n      let update_query = 'UPDATE dipreadings SET synced_at = (?) WHERE dipreading_id = (?)';\n      let datePipe = new DatePipe(this.configuration.LOCALE);\n      return await this.storage.executeSql(update_query, [datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), dipreading.dipreading_id])\n    });\n    return Promise.all(promises)\n  }\n}","import {Injectable} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\n\n/**\n * A custom Events service just like Ionic 3 Events https://ionicframework.com/docs/v3/api/util/Events/ which got removed in Ionic 5.\n *\n * @author Shashank Agrawal\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class Events {\n\n    private channels: { [key: string]: Subject<any>; } = {};\n\n    /**\n     * Subscribe to a topic and provide a single handler/observer.\n     * @param topic The name of the topic to subscribe to.\n     * @param observer The observer or callback function to listen when changes are published.\n     *\n     * @returns Subscription from which you can unsubscribe to release memory resources and to prevent memory leak.\n     */\n    subscribe(topic: string, observer: (_: any) => void): Subscription {\n        if (!this.channels[topic]) {\n            // You can also use ReplaySubject with one concequence\n            this.channels[topic] = new Subject<any>();\n        }\n\n        return this.channels[topic].subscribe(observer);\n    }\n    \n    \n    unsubscribe(topic: string, observer: (_: any) => void): Subscription {\n        if (this.channels[topic]) {\n            // You can also use ReplaySubject with one concequence\n            this.channels[topic].unsubscribe();\n        }\n\n        return;\n    }    \n    \n\n    /**\n     * Publish some data to the subscribers of the given topic.\n     * @param topic The name of the topic to emit data to.\n     * @param data data in any format to pass on.\n     */\n    publish(topic: string, data?: any): void {\n        const subject = this.channels[topic];\n        if (!subject) {\n            // Or you can create a new subject for future subscribers\n            return;\n        }\n\n        subject.next(data);\n    }\n\n    /**\n     * When you are sure that you are done with the topic and the subscribers no longer needs to listen to a particular topic, you can\n     * destroy the observable of the topic using this method.\n     * @param topic The name of the topic to destroy.\n     */\n    destroy(topic: string): null {\n        const subject = this.channels[topic];\n        if (!subject) {\n            return;\n        }\n\n        subject.complete();\n        delete this.channels[topic];\n    }\n}","import 'rxjs/add/operator/toPromise';\nimport { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OperatorService {\n\n    private in_progress:boolean = false;\n\n    constructor(private http:HttpClient, private configuration:Config, private storage:SqlService) {\n        console.log('[OperatorService] - constructor() :: ');\n\n    }\n\n    public init() {\n        console.log('[OperatorService] - init() :: Preparing database table');      \n        return this.storage.executeSql('CREATE TABLE IF NOT EXISTS operators (operator_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, pin_no TEXT)');\n    }\n\n    async load() {\n        console.log('[OperatorService] - load() :: Loading operators from the API');\n        \n        if(this.in_progress)\n        {\n            console.log('[OperatorService] - load() :: Loading is already in progress, exit.');\n            return null;\n        }\n\n        this.in_progress = true;\n\n\n        let result:any = await this.http\n            .get(`${this.configuration.API_ENDPOINT}/operators-dep/${this.configuration.DEPARTMENT_ID}`)\n            .toPromise();\n        console.log('[OperatorService] - load() :: Operators loaded from the API');\n\n        console.log('[OperatorService] - load() :: Deleting operators from the cache');\n        await this.deleteAll();\n        console.log('[OperatorService] - load() :: Operators deleted from the cache');\n\n        console.log('[OperatorService] - load() :: Creating operators in the cache.');\n  \n        let promises = result.Operators.map(async (item) => {\n            item.pin_no = item.pin_no ? parseInt(item.pin_no) : \"\";\n            await this.create(item);\n        });\n        console.info('[OperatorService] - load() :: Operators loaded from the API and cached.');\n        this.in_progress = false;\n        return Promise.all(promises)\n    }\n\n    async find(id: Number) {\n        let query = 'SELECT operator_id, first_name, last_name, pin_no FROM operators WHERE operator_id = (?)';\n        return this.storage.executeSql(query, [id]);\n    }\n\n    async findByPinCode(pin_no: string) {\n        console.log(`[OperatorService] - findByPinCode() :: Attempt to find operator with the PIN ${pin_no}`);\n        let query = 'SELECT operator_id, first_name, last_name, pin_no FROM operators WHERE pin_no = (?)';\n        return this.storage.executeSql(query, [pin_no]);\n    }\n\n    async deleteAll() {\n        return Promise.all([\n            this.storage.executeSql('DELETE FROM operators'),\n            this.storage.executeSql('DELETE FROM SQLITE_SEQUENCE WHERE name=\"operators\"')\n        ]);\n    }\n\n    async create(operator) {\n        let query = 'INSERT INTO operators (operator_id, first_name, last_name, pin_no) VALUES (?, ?, ?, ?)';\n        return this.storage.executeSql(query, [operator.operator_id, operator.first_name, operator.last_name, operator.pin_no]);\n    }\n}\n\n","import 'rxjs/add/operator/toPromise';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n\nimport { Events }               from './events-service';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlantService {\n\n\n    private in_progress:boolean = false;\n\n    constructor(private http: HttpClient, private configuration: Config, private storage: SqlService, private events:Events) {\n        console.log('[PlantService] - constructor() :: ');        \n\n    }\n\n    public init() {        \n        console.log('[PlantService] - init() :: Preparing database table');\n        return this.storage.executeSql('CREATE TABLE IF NOT EXISTS plants (id INTEGER PRIMARY KEY, plant_id INTEGER, plant_no INTEGER, tail_no TEXT)');\n    }\n\n    async load() {\n        console.log('[PlantService] - load() :: Loading plants from the API');\n\n        if(this.in_progress)\n        {\n            console.log('[PlantService] - load() :: Loading is already in progress, exit.');\n            return null;\n        }\n\n        this.in_progress = true;\n\n        let result:any = await this.http\n            .get(`${this.configuration.API_ENDPOINT}/plants-dep/${this.configuration.DEPARTMENT_ID}`)\n            .toPromise();\n            \n        console.log('[PlantService] - load() :: Plants loaded from the API.');\n\n        console.log('[PlantService] - load() :: Deleting plants from the cache.');\n        await this.deleteAll();\n        console.log('[PlantService] - load() :: Plants deleted from the cache.');\n\n        console.log('[PlantService] - load() :: Creating plants in the cache.');\n        let promises = result.Plant.map(async (item) => {\n            // console.log('[PlantService] - load() :: Creating plant in the cache.', item);\n            await this.create(item);\n        });\n        console.info('[PlantService] - load() :: Plants loaded from the API and cached.');\n        this.events.publish('plants:loaded');\n        console.info('[PlantService] - load() :: Event \"plants:loaded\" published.');\n\n        this.in_progress = false;\n\n        return Promise.all(promises)\n    }\n\n    async findAll() {\n        let query = 'SELECT plant_id, plant_no, tail_no FROM plants';\n        return this.storage.executeSql(query);\n    }\n\n    async find(id: Number) {\n        let query = 'SELECT plant_id, plant_no, tail_no FROM plants WHERE plant_id = (?)';\n        return this.storage.executeSql(query, [id]);\n    }\n\n    async deleteAll() {\n        console.log('[PlantService] - deleteAll() :: Deleting plants from the cache.');\n        return Promise.all([\n            this.storage.executeSql('DELETE FROM plants'),\n            this.storage.executeSql('DELETE FROM SQLITE_SEQUENCE WHERE name=\"plants\"')\n        ]);\n    }\n\n    async create(plant) {\n        let query = 'INSERT INTO plants (plant_id, plant_no, tail_no) VALUES (?, ?, ?)';\n        return this.storage.executeSql(query, [plant.plant_id, plant.plant_no, plant.tail_no]);\n    }\n}\n\n","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http'\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\nimport { AppVersion } from '@ionic-native/app-version/ngx';\nimport {Config} from '../../environments/config';\nimport { Platform }             from '@ionic/angular';\n\n\nconst win: any = window;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SqlService {\n\n    private storage:SQLiteObject;\n    private sqlite:any;\n  constructor(private http: HttpClient, private configuration: Config, private appVersion: AppVersion, private platform:Platform) {\n    console.log('[SqlService] - constructor() :: ');\n    \n    \n    this.platform.ready().then(() => {\n\n        try{\n\n            if (this.platform.is(\"ios\") || this.platform.is(\"android\") || win.sqlitePlugin){\n\n\n                this.sqlite = new SQLite();\n\n                Promise.all([\n                  this.appVersion.getAppName(),\n                  this.appVersion.getVersionCode(),\n                  this.appVersion.getVersionNumber(),\n                ]).then(\n                    result => {\n                        console.log(`[SqlService] - constructor() :: Opening database ${result[0]}.${result[1]}.${result[2]}.db`);\n                        this.sqlite.create({\n                           name: `${result[0]}.${result[1]}.${result[2]}.db`,\n                           location: 'default'\n                         })  .then((db: SQLiteObject) => {\n\n                                this.storage = db;  \n                         });                  \n\n                    }\n                ).catch((err) => {\n                    alert(err);\n                    alert(\"Catch error creating database\");\n                    console.log(err);\n                })        \n\n\n            }\n            else{\n                console.log('[SqlService] - constructor() :: Creating WebSQL service');\n                alert(\"Creating database win.opendatabase\");\n                this.storage = win.openDatabase(this.configuration.DATABASE_CONFIG.name, '1.0', 'database', 5 * 1024 * 1024);            \n            }     \n\n\n        /*\n            if (win.sqlitePlugin) {\n              console.log('[SqlService] - constructor() :: Creating SQLite service');\n              this.storage = new SQLite();\n\n              Promise.all([\n                this.appVersion.getAppName(),\n                this.appVersion.getVersionCode(),\n                this.appVersion.getVersionNumber(),\n              ]).then(\n                  result => {\n                    console.log(`[SqlService] - constructor() :: Opening database ${result[0]}.${result[1]}.${result[2]}.db`);\n                    this.storage.openDatabase({\n                        name:       `${result[0]}.${result[1]}.${result[2]}.db`,\n                        location:   'default'\n                    });\n                  }\n              )\n            }\n            else {\n\n            }\n            */\n        }\n        catch(err){\n            alert(\"Error creating database\");\n            alert(err);\n            console.log(err)\n        }\n    \n    });\n    \n  }\n\n  public executeSql(statement: string, params: any = []): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.storage.transaction((tx: any) => {\n            tx.executeSql(statement, params,\n              (tx: any, res: any) => resolve({tx: tx, res: res}),\n              (tx: any, err: any) => reject({tx: tx, err: err}));\n          });\n      } catch (err) {\n        console.warn('[SqlService] - executeSql() :: Error executing statement', statement);  \nconsole.log(err);\n        reject({err: err});\n      }\n    });    \n  }\n}\n","import 'rxjs/add/operator/toPromise';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n\nimport { Events }               from './events-service';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TankService {\n\n\n    private in_progress:boolean = false;\n\n    constructor(private http: HttpClient, private configuration: Config, private storage: SqlService, private events:Events) {\n        console.log('[TankService] - constructor() :: ');        \n\n    }\n\n    public init() {        \n        console.log('[TankService] - init() :: Preparing database table');\n        return this.storage.executeSql('CREATE TABLE IF NOT EXISTS tanks (id INTEGER PRIMARY KEY, trailer_id INTEGER, trailer_no INTEGER, trailer_name TEXT)');\n    }\n\n    async load() {\n        console.log('[TankService] - load() :: Loading tanks from the API');\n\n        if(this.in_progress)\n        {\n            console.log('[TankService] - load() :: Loading is already in progress, exit.');\n            return null;\n        }\n\n        this.in_progress = true;\n\n        let result:any = await this.http\n            .get(`${this.configuration.API_ENDPOINT}/tanks-dep/${this.configuration.DEPARTMENT_ID}`)\n            .toPromise();\n            \n        console.log('[TankService] - load() :: Tanks loaded from the API.');\n\n        console.log('[TankService] - load() :: Deleting tanks from the cache.');\n        await this.deleteAll();\n        console.log('[TankService] - load() :: Tanks deleted from the cache.');\n\n        console.log('[TankService] - load() :: Creating tanks in the cache.');\n        let promises = result.Tank.map(async (item) => {\n            await this.create(item);\n        });\n        console.info('[TankService] - load() :: Tanks loaded from the API and cached.');\n        this.events.publish('tanks:loaded');\n        console.info('[TankService] - load() :: Event \"tanks:loaded\" published.');\n\n        this.in_progress = false;\n\n        return Promise.all(promises)\n    }\n\n    async findAll() {\n        let query = 'SELECT trailer_id, trailer_no, trailer_name FROM tanks';\n        return this.storage.executeSql(query);\n    }\n\n    async find(id: Number) {\n        let query = 'SELECT trailer_id, trailer_no, trailer_name FROM tanks WHERE trailer_id = (?)';\n        return this.storage.executeSql(query, [id]);\n    }\n\n    async deleteAll() {\n        console.log('[TankService] - deleteAll() :: Deleting tanks from the cache.');\n        return Promise.all([\n            this.storage.executeSql('DELETE FROM tanks'),\n            this.storage.executeSql('DELETE FROM SQLITE_SEQUENCE WHERE name=\"tanks\"')\n        ]);\n    }\n\n    async create(tank) {\n        let query = 'INSERT INTO tanks (trailer_id, trailer_no, trailer_name) VALUES (?, ?, ?)';\n        return this.storage.executeSql(query, [tank.trailer_id, tank.trailer_no, tank.trailer_name]);\n    }\n}\n\n","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { DatePipe }     from '@angular/common';\n\nimport { SqlService }   from './sql-service';\nimport {Config} from '../../environments/config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimesheetService {\n\n\n\n  constructor(private http:HttpClient, private configuration: Config, private storage: SqlService) {\n    console.log('[TimesheetService] - constructor() :: ');            \n\n  }\n\n  public init() {\n    console.log('[TimesheetService] - init() :: Preparing database table');    \n    return this.storage.executeSql(`CREATE TABLE IF NOT EXISTS timesheets (\n      timesheet_id INTEGER PRIMARY KEY AUTOINCREMENT,\n      operator_id INTEGER, \n      plant_id INTEGER, \n      start_date TEXT,\n      end_date TEXT, \n      start_hours TEXT, \n      end_hours TEXT, \n      synced_at TEXT\n    )`);\n  }\n\n  async create(data) {\n    console.log('[TimesheetService] - create() :: Creating timesheet in the cache:', data);\n    let insert_query = 'INSERT INTO timesheets (operator_id, plant_id, start_date, end_date, start_hours, end_hours) VALUES (?, ?, ?, ?, ?, ?)';\n    let result = await this.storage.executeSql(\n      insert_query,\n      [\n        data.operator_id,\n        data.plant_id,\n        data.start_date,\n        data.end_date,\n        data.start_hours,\n        data.end_hours\n      ]\n    );\n\n    console.log('[TimesheetService] - create() :: Timesheet created in the cache:', result.res.insertId);\n\n    try {\n      console.log('[TimesheetService] - create() :: Creating timesheetService in the API:', result);\n      data.timesheet_id = result.res.insertId;\n      let api_result = await this.http\n        .post(this.configuration.API_ENDPOINT + '/air-trans/', data)\n        .toPromise();\n\n        console.log('[TimesheetService] - create() :: Timesheet created in the API:', api_result);\n\n        console.log('[TimesheetService] - create() :: Updating timesheet in the cache as synced:', api_result);\n        let update_query  = `UPDATE timesheets SET synced_at = (?) WHERE timesheet_id = (?)`;\n        let datePipe      = new DatePipe(this.configuration.LOCALE);\n        result            = await this.storage.executeSql(\n                                update_query, \n                                [\n                                datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), \n                                data.timesheet_id\n                                ]\n        );\n        console.log('[TimesheetService] - create() :: Timesheet updated in the cache as synced:', result);\n        console.info('[TimesheetService] - create() :: Timesheet uploaded and marked as synced');\n\n    }\n    catch (exception) {\n      console.warn('[TimesheetService] - create() :: Failed to create timesheet in the API:', data, exception);\n    }\n    return result;\n  }\n\n  async upload() {\n    console.log('[TimesheetService] - upload() :: Finding non-synced timesheets');\n    let select_query = 'SELECT timesheet_id, operator_id, plant_id, start_date, end_date, start_hours, end_hours, synced_at FROM timesheets WHERE synced_at IS NULL';\n    let timesheets = await this.storage.executeSql(select_query);\n    console.log('[TimesheetService] - upload() :: Found non-synced timesheets:', timesheets.res.rows.length);    \n    let promises = Array.from(timesheets.res.rows).map(async (timesheet: any) => {\n      console.log('[TimesheetService] - upload() :: Updating non-synced timesheet', timesheet);\n\n      await this.http\n        .post(this.configuration.API_ENDPOINT + '/air-trans/', timesheet)\n        .toPromise();\n\n      let update_query = 'UPDATE timesheets SET synced_at = (?) WHERE timesheet_id = (?)';\n      let datePipe = new DatePipe(this.configuration.LOCALE);\n      return await this.storage.executeSql(update_query, [datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), timesheet.timesheet_id])\n    });\n    return Promise.all(promises)\n  }\n}","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { DatePipe }     from '@angular/common';\nimport {Config} from '../../environments/config';\nimport { SqlService }   from './sql-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionService {\n\n\n\n    constructor(private http: HttpClient, private configuration: Config, private storage: SqlService) {\n        console.log('[TransactionService] - constructor() :: ');\n\n\n    }\n\n    public init() {\n        console.log('[TransactionService] - init() :: Preparing database table');\n        return  this.storage.executeSql(`CREATE TABLE IF NOT EXISTS transactions (\n            transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            pad_id TEXT,\n            operator_id INTEGER,\n            plant_id INTEGER,\n            trailer_id INTEGER,\n            odometer INTEGER,\n            battery_percentage INTEGER,\n            long TEXT,\n            lat TEXT,\n            end_value TEXT,\n            end_total_value TEXT,\n            transaction_end_date TEXT,\n            synced_at TEXT\n        )`);\n    }\n    \n    public initRefills() {\n        console.log('[TransactionService] - init() :: Preparing database table 2');\n        return  this.storage.executeSql(`CREATE TABLE IF NOT EXISTS refills (\n            transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            operator_id INTEGER,\n            from_trailer_id INTEGER,\n            to_trailer_id INTEGER,\n            amount TEXT,\n            synced_at TEXT\n        )`);\n    }    \n\n    async create(transaction) {\n\n        console.log('[TransactionService] - create() :: Creating transaction in the cache:', transaction);\n        let datePipe = new DatePipe(this.configuration.LOCALE);\n        // transaction.transaction_end_date is a timestamp, but in local time ...\n        let transaction_end_date            = transaction.transaction_end_date;\n        transaction_end_date                = transaction_end_date + (new Date()).getTimezoneOffset() * 60;\n        transaction.transaction_end_date    = datePipe.transform(new Date(transaction_end_date * 1000), 'y-MM-dd HH:mm:ss')\n        let insert_query = `INSERT INTO transactions (\n            pad_id, \n            operator_id, \n            plant_id, \n            trailer_id, \n            odometer, \n            battery_percentage, \n            long, \n            lat, \n            end_value, \n            end_total_value, \n            transaction_end_date\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;\n\n        let result = await this.storage.executeSql(\n            insert_query,\n            [\n                transaction.pad_id,\n                transaction.operator_id,\n                transaction.plant_id,\n                transaction.trailer_id,\n                transaction.odometer,\n                transaction.battery_percentage,\n                transaction.long,\n                transaction.lat,\n                transaction.end_value,\n                transaction.end_total_value,\n                transaction.transaction_end_date\n            ]\n        );\n\n        console.log('[TransactionService] - create() :: Transaction created in the cache:', transaction);\n\n        try {\n            console.log('[TransactionService] - create() :: Uploading transaction in the API:', result);\n            transaction.transaction_id = result.res.insertId;\n            let api_result = await this.http\n                .post(this.configuration.API_ENDPOINT + '/transaction/', transaction)\n                .toPromise();\n\n            console.log('[TransactionService] - create() :: Transaction uploaded to the API:', api_result);\n\n            console.log('[TransactionService] - create() :: Marking transaction in the cache as synced:', api_result);\n            let update_query = 'UPDATE transactions SET synced_at = (?) WHERE transaction_id = (?)';\n            result = await this.storage.executeSql(update_query, [datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), transaction.transaction_id])\n            console.log('[TransactionService] - create() :: Transaction marked in the cache as synced:', result);\n            console.info('[TransactionService] - create() :: Transaction uploaded and marked as synced');\n\n        }\n        catch (exception) {\n            console.warn('[TransactionService] - create() :: Failed to create transaction in the API:', transaction, exception);\n        }\n        return result;\n    }\n    \n    \n    async createRefill(transaction) {\n\t\t\n\n\t\tlet api_result = await this.http\n\t\t.post(this.configuration.API_ENDPOINT + '/tank-refill/', transaction)\n\t\t.toPromise();\n\t\t\n\t\t\n\t\treturn api_result;\n\t\t\n/* \t\talert(\"Saving locally\");\n\t\t\n\t\t\n        console.log('[TransactionService] - create() :: Creating Refill in the cache:', transaction);\n        let insert_query = `INSERT INTO refills (operator_id, from_trailer_id, to_trailer_id, amount) VALUES (?, ?, ?, ?)`;\n\t\t\n\t\t\n\t\t\n        let result = await this.storage.executeSql(\n          insert_query,\n          [\n            transaction.operator_id,\n            transaction.from_trailer_id,\n            transaction.to_trailer_id,\n            transaction.amount,\n          ]\n        );\n\t\t\nalert(JSON.stringify(result));\n\t\t\nalert(\"Transaction created in the cache\");\n\n\nalert(result.res.insertId);\n\n        console.log('[TransactionService] - create() :: Transaction created in the cache:', result.res.insertId);\n\n        try {\n          console.log('[TransactionService] - create() :: Creating TransactionService in the API:', result);\n\t\t  alert(\"Creating in API\");\n          transaction.transaction_id = result.res.insertId;\n          let api_result = await this.http\n            .post(this.configuration.API_ENDPOINT + '/tank-refill/', transaction)\n            .toPromise();\n\n            console.log('[TransactionService] - create() :: Transaction created in the API:', api_result);\nalert(\"Transaction created in the API\");\n            console.log('[TransactionService] - create() :: Updating Transaction in the cache as synced:', api_result);\n            let update_query  = `UPDATE refills SET synced_at = (?) WHERE transaction_id = (?)`;\n            let datePipe      = new DatePipe(this.configuration.LOCALE);\n            result            = await this.storage.executeSql(\n                                    update_query, \n                                    [\n                                    datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), \n                                    transaction.dipreading_id\n                                    ]\n            );\n\t\t\talert(\"Transaction updated in the cache as synced\");\n\t\t\t\n            console.log('[TransactionService] - create() :: Transaction updated in the cache as synced:', result);\n            console.info('[TransactionService] - create() :: Transaction uploaded and marked as synced');\n\t\t\t\n\n        }\n        catch (exception) {\n\t\t\talert(\"failed in API\");\n\t\t\talert(JSON.stringify(exception));\n\t\t\talert(JSON.stringify(transaction));\n\t\t\t\n          console.warn('[TransactionService] - create() :: Failed to create Transaction in the API:', transaction, exception);\n        }\n        return result; */\n    }    \n    \n    \n\n    async upload() {\n        console.log('[TransactionService] - upload() :: Finding non-synced transactions');\n        let select_query = `SELECT \n                          transaction_id, \n                          pad_id, \n                          operator_id, \n                          plant_id, \n                          trailer_id, \n                          odometer, \n                          battery_percentage, \n                          long, \n                          lat, \n                          end_value, \n                          end_total_value, \n                          transaction_end_date, \n                          synced_at \n                          FROM transactions WHERE synced_at IS NULL`;\n\n        let transactions = await this.storage.executeSql(select_query).then(\n            async data => {\n                console.log('[TransactionService] - upload() :: Found non-synced transaction:', data.res.rows.length);\n                \n                let promises = [];\n                \n                for(let i = 0; i < data.res.rows.length; i++) {\n\n                    let transaction = data.res.rows.item(i);\n\n                    \n                    await this.http\n                        .post(this.configuration.API_ENDPOINT + '/transaction/', transaction)\n                        .toPromise();\n\n                    let update_query = 'UPDATE transactions SET synced_at = (?) WHERE transaction_id = (?)';\n                    let datePipe = new DatePipe(this.configuration.LOCALE);\n\n                    let promise = await this.storage.executeSql(\n                        update_query,\n                        [\n                            datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'),\n                            transaction.transaction_id\n                        ]\n                    );\n                    \n                    promises.push(promise);                    \n                    \n                    \n                }\n                \n                return promises;\n            }\n        );\n        \n        \n        \n        let transactions2 = await this.storage.executeSql(\"SELECT * FROM refills WHERE synced_at IS NULL\").then(\n            async data => {\n                console.log('[TransactionService] - upload() :: Found non-synced refill transaction:', data.res.rows.length);\n                \n                let promises = [];\n                \n                for(let i = 0; i < data.res.rows.length; i++) {\n\n                    let transaction = data.res.rows.item(i);\n\n                    \n                    await this.http\n                        .post(this.configuration.API_ENDPOINT + '/tank-refills/', transaction)\n                        .toPromise();\n\n                    let update_query = 'UPDATE refills SET synced_at = (?) WHERE transaction_id = (?)';\n                    let datePipe = new DatePipe(this.configuration.LOCALE);\n\n                    let promise = await this.storage.executeSql(\n                        update_query,\n                        [\n                            datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'),\n                            transaction.transaction_id\n                        ]\n                    );\n                    \n                    promises.push(promise);                    \n                    \n                    \n                }\n                \n                return promises;\n            }\n        );        \n        \n        \n        \n\n        return Promise.all(transactions);\n    }\n    \n    \n    async uploadRefills() {\n        console.log('[TransactionService] - upload() :: Finding non-synced transactions');\n        let select_query = `SELECT * FROM refills WHERE synced_at IS NULL`;\n\n        \n        \n        \n        let transactions = await this.storage.executeSql(select_query).then(\n            async data => {\n                console.log('[TransactionService] - upload() :: Found non-synced refill transaction:', data.res.rows.length);\n                \n                let promises = [];\n                \n                for(let i = 0; i < data.res.rows.length; i++) {\n\n                    let transaction = data.res.rows.item(i);\n\n                    \n                    await this.http\n                        .post(this.configuration.API_ENDPOINT + '/tank-refills/', transaction)\n                        .toPromise();\n\n                    let update_query = 'UPDATE refills SET synced_at = (?) WHERE transaction_id = (?)';\n                    let datePipe = new DatePipe(this.configuration.LOCALE);\n\n                    let promise = await this.storage.executeSql(\n                        update_query,\n                        [\n                            datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'),\n                            transaction.transaction_id\n                        ]\n                    );\n                    \n                    promises.push(promise);                    \n                    \n                    \n                }\n                \n                return promises;\n            }\n        );        \n        \n        \n        \n\n        return Promise.all(transactions);\n    }    \n    \n    \n\n}\n\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Config {\n  // public API_ENDPOINT = '/api';\n  public API_ENDPOINT = 'https://www.fuel-it.co/AWS15/fitAPI/api';\n  public DATABASE_CONFIG = {\n    name:       'fuelit.db',\n    location:   'default'\n  };\n  public LOCALE = 'en';\n  public DEPARTMENT_ID = 478;\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t7321,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-action-sheet_entry_js\"\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t6108,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-alert_entry_js\"\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t1489,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-app_8_entry_js\"\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t305,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-avatar_3_entry_js\"\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t5830,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-back-button_entry_js\"\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t3519,\n\t\t\"node_modules_ionic_core_dist_esm_ion-backdrop_entry_js\"\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t392,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-button_2_entry_js\"\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t6911,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-card_5_entry_js\"\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t937,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-checkbox_entry_js\"\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t8695,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-chip_entry_js\"\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t6034,\n\t\t\"node_modules_ionic_core_dist_esm_ion-col_3_entry_js\"\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t8837,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-datetime_3_entry_js\"\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t4195,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-fab_3_entry_js\"\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t1709,\n\t\t\"node_modules_ionic_core_dist_esm_ion-img_entry_js\"\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t5931,\n\t\t\"node_modules_ionic_core_dist_esm_ion-infinite-scroll_2_entry_js\"\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t4513,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-input_entry_js\"\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t8056,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-item-option_3_entry_js\"\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t862,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-item_8_entry_js\"\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t7509,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-loading_entry_js\"\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t6272,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-menu_3_entry_js\"\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t1855,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-modal_entry_js\"\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t8708,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-nav_2_entry_js\"\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t3527,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-popover_entry_js\"\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t4694,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-progress-bar_entry_js\"\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t9222,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-radio_2_entry_js\"\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t5277,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-range_entry_js\"\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t9921,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-refresher_2_entry_js\"\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t3122,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-reorder_2_entry_js\"\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t1602,\n\t\t\"node_modules_ionic_core_dist_esm_ion-ripple-effect_entry_js\"\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t5174,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-route_4_entry_js\"\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t7895,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-searchbar_entry_js\"\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t6164,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-segment_2_entry_js\"\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t592,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-select_3_entry_js\"\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t7162,\n\t\t\"node_modules_ionic_core_dist_esm_ion-slide_2_entry_js\"\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t1374,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-spinner_entry_js\"\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t7896,\n\t\t\"node_modules_ionic_core_dist_esm_ion-split-pane_entry_js\"\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t5043,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-tab-bar_2_entry_js\"\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t7802,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-tab_2_entry_js\"\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t9072,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-text_entry_js\"\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t2191,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-textarea_entry_js\"\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t801,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-toast_entry_js\"\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t7110,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-toggle_entry_js\"\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t431,\n\t\t\"node_modules_ionic_core_dist_esm_ion-virtual-scroll_entry_js\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 863;\nmodule.exports = webpackAsyncContext;","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"<ion-app>\\n  <ion-router-outlet></ion-router-outlet>\\n</ion-app>\\n\";","export default \"<ion-list>\\n  <ion-item button (click)=\\\"refresh()\\\"> <ion-label>Sync data</ion-label></ion-item>\\n  <ion-item button (click)=\\\"logout()\\\"> <ion-label>Logout</ion-label></ion-item>\\n  <!--<button ion-item (click)=\\\"error()\\\">Error</button>-->\\n</ion-list>\\n\";"],"sourceRoot":"webpack:///"}